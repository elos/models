package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Session struct {
	CreatedAt    time.Time `json:"created_at" bson:"created_at"`
	ExpiresAfter int       `json:"expires_after" bson:"expires_after"`
	Id           string    `json:"id" bson:"_id,omitempty"`
	Token        string    `json:"token" bson:"token"`
	UpdatedAt    time.Time `json:"updated_at" bson:"updated_at"`
	UserID       string    `json:"user_id" bson:"user_id"`
}

func NewSession() *Session {
	return &Session{}
}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (session *Session) Kind() data.Kind {
	return SessionKind
}

// just returns itself for now
func (session *Session) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = session.ID()
	return foo
}

func (session *Session) SetID(id data.ID) {
	session.Id = id.String()
}

func (session *Session) ID() data.ID {
	return data.ID(session.Id)
}

func (session *Session) SetUser(user *User) error {
	session.UserID = user.ID().String()
	return nil
}

func (session *Session) User(db data.DB) (*User, error) {
	if session.UserID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(session.UserID)
	user.SetID(data.ID(pid.Hex()))
	return user, db.PopulateByID(user)

}

func (session *Session) UserOrCreate(db data.DB) (*User, error) {
	user, err := session.User(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := session.SetUser(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(session); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

// BSON {{{
func (session *Session) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		ExpiresAfter int `json:"expires_after" bson:"expires_after"`

		Id string `json:"id" bson:"_id,omitempty"`

		Token string `json:"token" bson:"token"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		UserID string `json:"user_id" bson:"user_id"`
	}{

		CreatedAt: session.CreatedAt,

		ExpiresAfter: session.ExpiresAfter,

		Token: session.Token,

		UpdatedAt: session.UpdatedAt,

		UserID: session.UserID,
	}, nil

}

func (session *Session) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		ExpiresAfter int `json:"expires_after" bson:"expires_after"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Token string `json:"token" bson:"token"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		UserID string `json:"user_id" bson:"user_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	session.CreatedAt = tmp.CreatedAt

	session.ExpiresAfter = tmp.ExpiresAfter

	session.Id = tmp.Id.Hex()

	session.Token = tmp.Token

	session.UpdatedAt = tmp.UpdatedAt

	session.UserID = tmp.UserID

	return nil

}

// BSON }}}
