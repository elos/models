package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"github.com/elos/metis"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Habit struct {
	CheckinsIds []string  `json:"checkins_ids" bson:"checkins_ids"`
	CreatedAt   time.Time `json:"created_at" bson:"created_at"`
	DeletedAt   time.Time `json:"deleted_at" bson:"deleted_at"`
	Id          string    `json:"id" bson:"_id,omitempty"`
	Name        string    `json:"name" bson:"name"`
	OwnerId     string    `json:"owner_id" bson:"owner_id"`
	TagId       string    `json:"tag_id" bson:"tag_id"`
	UpdatedAt   time.Time `json:"updated_at" bson:"updated_at"`
}

func NewHabit() *Habit {
	return &Habit{}
}

func FindHabit(db data.DB, id data.ID) (*Habit, error) {

	habit := NewHabit()
	habit.SetID(id)

	return habit, db.PopulateByID(habit)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (habit *Habit) Kind() data.Kind {
	return HabitKind
}

// just returns itself for now
func (habit *Habit) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = habit.ID()
	return foo
}

func (habit *Habit) SetID(id data.ID) {
	habit.Id = id.String()
}

func (habit *Habit) ID() data.ID {
	return data.ID(habit.Id)
}

func (habit *Habit) IncludeCheckin(checkin *Event) {
	otherID := checkin.ID().String()
	for i := range habit.CheckinsIds {
		if habit.CheckinsIds[i] == otherID {
			return
		}
	}
	habit.CheckinsIds = append(habit.CheckinsIds, otherID)
}

func (habit *Habit) ExcludeCheckin(checkin *Event) {
	tmp := make([]string, 0)
	id := checkin.ID().String()
	for _, s := range habit.CheckinsIds {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	habit.CheckinsIds = tmp
}

func (habit *Habit) CheckinsIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(habit.CheckinsIds), db), nil
}

func (habit *Habit) Checkins(db data.DB) (checkins []*Event, err error) {
	checkins = make([]*Event, len(habit.CheckinsIds))
	checkin := NewEvent()
	for i, id := range habit.CheckinsIds {
		checkin.Id = id
		if err = db.PopulateByID(checkin); err != nil {
			return
		}

		checkins[i] = checkin
		checkin = NewEvent()
	}

	return
}

func (habit *Habit) SetOwner(userArgument *User) error {
	habit.OwnerId = userArgument.ID().String()
	return nil
}

func (habit *Habit) Owner(db data.DB) (*User, error) {
	if habit.OwnerId == "" {
		return nil, ErrEmptyLink
	}

	userArgument := NewUser()
	id, _ := db.ParseID(habit.OwnerId)
	userArgument.SetID(id)
	return userArgument, db.PopulateByID(userArgument)

}

func (habit *Habit) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := habit.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := habit.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(habit); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

func (habit *Habit) SetTag(tagArgument *Tag) error {
	habit.TagId = tagArgument.ID().String()
	return nil
}

func (habit *Habit) Tag(db data.DB) (*Tag, error) {
	if habit.TagId == "" {
		return nil, ErrEmptyLink
	}

	tagArgument := NewTag()
	id, _ := db.ParseID(habit.TagId)
	tagArgument.SetID(id)
	return tagArgument, db.PopulateByID(tagArgument)

}

func (habit *Habit) TagOrCreate(db data.DB) (*Tag, error) {
	tag, err := habit.Tag(db)

	if err == ErrEmptyLink {
		tag := NewTag()
		tag.SetID(db.NewID())
		if err := habit.SetTag(tag); err != nil {
			return nil, err
		}

		if err := db.Save(tag); err != nil {
			return nil, err
		}

		if err := db.Save(habit); err != nil {
			return nil, err
		}

		return tag, nil
	} else {
		return tag, err
	}
}

// BSON {{{
func (habit *Habit) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		CheckinsIds []string `json:"checkins_ids" bson:"checkins_ids"`

		OwnerId string `json:"owner_id" bson:"owner_id"`

		TagId string `json:"tag_id" bson:"tag_id"`
	}{

		CreatedAt: habit.CreatedAt,

		DeletedAt: habit.DeletedAt,

		Name: habit.Name,

		UpdatedAt: habit.UpdatedAt,

		CheckinsIds: habit.CheckinsIds,

		OwnerId: habit.OwnerId,

		TagId: habit.TagId,
	}, nil

}

func (habit *Habit) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		CheckinsIds []string `json:"checkins_ids" bson:"checkins_ids"`

		OwnerId string `json:"owner_id" bson:"owner_id"`

		TagId string `json:"tag_id" bson:"tag_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	habit.CreatedAt = tmp.CreatedAt

	habit.DeletedAt = tmp.DeletedAt

	habit.Id = tmp.Id.Hex()

	habit.Name = tmp.Name

	habit.UpdatedAt = tmp.UpdatedAt

	habit.CheckinsIds = tmp.CheckinsIds

	habit.OwnerId = tmp.OwnerId

	habit.TagId = tmp.TagId

	return nil

}

// BSON }}}

func (habit *Habit) FromStructure(structure map[string]interface{}) {

	if val, ok := structure["name"]; ok {
		habit.Name = val.(string)
	}

	if val, ok := structure["id"]; ok {
		habit.Id = val.(string)
	}

	if val, ok := structure["created_at"]; ok {
		habit.CreatedAt = val.(time.Time)
	}

	if val, ok := structure["updated_at"]; ok {
		habit.UpdatedAt = val.(time.Time)
	}

	if val, ok := structure["deleted_at"]; ok {
		habit.DeletedAt = val.(time.Time)
	}

	if val, ok := structure["owner_id"]; ok {
		habit.OwnerId = val.(string)
	}

	if val, ok := structure["tag_id"]; ok {
		habit.TagId = val.(string)
	}

	if val, ok := structure["checkins_ids"]; ok {
		habit.CheckinsIds = val.([]string)
	}

}

var HabitStructure = map[string]metis.Primitive{

	"id": 9,

	"created_at": 4,

	"updated_at": 4,

	"deleted_at": 4,

	"name": 3,

	"owner_id": 9,

	"tag_id": 9,

	"checkins_ids": 10,
}
