package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Ontology struct {
	ClassesIDs []string  `json:"classes_ids" bson:"classes_ids"`
	CreatedAt  time.Time `json:"created_at" bson:"created_at"`
	Id         string    `json:"id" bson:"_id,omitempty"`
	ObjectsIDs []string  `json:"objects_ids" bson:"objects_ids"`
	UpdatedAt  time.Time `json:"updated_at" bson:"updated_at"`
	UserID     string    `json:"user_id" bson:"user_id"`
}

func NewOntology() *Ontology {
	return &Ontology{}
}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (ontology *Ontology) Kind() data.Kind {
	return OntologyKind
}

// just returns itself for now
func (ontology *Ontology) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = ontology.ID()
	return foo
}

func (ontology *Ontology) SetID(id data.ID) {
	ontology.Id = id.String()
}

func (ontology *Ontology) ID() data.ID {
	return data.ID(ontology.Id)
}

func (ontology *Ontology) IncludeClass(class *Class) {
	ontology.ClassesIDs = append(ontology.ClassesIDs, class.ID().String())
}

func (ontology *Ontology) ExcludeClass(class *Class) {
	tmp := make([]string, 0)
	id := class.ID().String()
	for _, s := range ontology.ClassesIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	ontology.ClassesIDs = tmp
}

func (ontology *Ontology) ClassesIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(ontology.ClassesIDs), db), nil
}

func (ontology *Ontology) Classes(db data.DB) ([]*Class, error) {

	classes := make([]*Class, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(ontology.ClassesIDs), db)
	class := NewClass()
	for iter.Next(class) {
		classes = append(classes, class)
		class = NewClass()
	}
	return classes, nil
}

func (ontology *Ontology) IncludeObject(object *Object) {
	ontology.ObjectsIDs = append(ontology.ObjectsIDs, object.ID().String())
}

func (ontology *Ontology) ExcludeObject(object *Object) {
	tmp := make([]string, 0)
	id := object.ID().String()
	for _, s := range ontology.ObjectsIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	ontology.ObjectsIDs = tmp
}

func (ontology *Ontology) ObjectsIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(ontology.ObjectsIDs), db), nil
}

func (ontology *Ontology) Objects(db data.DB) ([]*Object, error) {

	objects := make([]*Object, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(ontology.ObjectsIDs), db)
	object := NewObject()
	for iter.Next(object) {
		objects = append(objects, object)
		object = NewObject()
	}
	return objects, nil
}

func (ontology *Ontology) SetUser(user *User) error {
	ontology.UserID = user.ID().String()
	return nil
}

func (ontology *Ontology) User(db data.DB) (*User, error) {
	if ontology.UserID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(ontology.UserID)
	user.SetID(data.ID(pid.Hex()))
	return user, db.PopulateByID(user)

}

// BSON {{{
func (ontology *Ontology) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		ClassesIDs []string `json:"classes_ids" bson:"classes_ids"`

		ObjectsIDs []string `json:"objects_ids" bson:"objects_ids"`

		UserID string `json:"user_id" bson:"user_id"`
	}{

		CreatedAt: ontology.CreatedAt,

		UpdatedAt: ontology.UpdatedAt,

		ClassesIDs: ontology.ClassesIDs,

		ObjectsIDs: ontology.ObjectsIDs,

		UserID: ontology.UserID,
	}, nil

}

func (ontology *Ontology) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		ClassesIDs []string `json:"classes_ids" bson:"classes_ids"`

		ObjectsIDs []string `json:"objects_ids" bson:"objects_ids"`

		UserID string `json:"user_id" bson:"user_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	ontology.CreatedAt = tmp.CreatedAt

	ontology.Id = tmp.Id.Hex()

	ontology.UpdatedAt = tmp.UpdatedAt

	ontology.ClassesIDs = tmp.ClassesIDs

	ontology.ObjectsIDs = tmp.ObjectsIDs

	ontology.UserID = tmp.UserID

	return nil

}

// BSON }}}
