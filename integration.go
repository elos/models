package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/metis"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Integration struct {
	CreatedAt                 time.Time `json:"created_at" bson:"created_at"`
	DeletedAt                 time.Time `json:"deleted_at" bson:"deleted_at"`
	Domain                    string    `json:"domain" bson:"domain"`
	Id                        string    `json:"id" bson:"_id,omitempty"`
	IntegrationCredentialId   string    `json:"integration_credential_id" bson:"integration_credential_id"`
	IntegrationCredentialKind string    `json:"integration_credential_kind" bson:"integration_credential_kind"`
	Name                      string    `json:"name" bson:"name"`
	OwnerId                   string    `json:"owner_id" bson:"owner_id"`
	UpdatedAt                 time.Time `json:"updated_at" bson:"updated_at"`
	Vendor                    string    `json:"vendor" bson:"vendor"`
}

func NewIntegration() *Integration {
	return &Integration{}
}

func FindIntegration(db data.DB, id data.ID) (*Integration, error) {

	integration := NewIntegration()
	integration.SetID(id)

	return integration, db.PopulateByID(integration)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (integration *Integration) Kind() data.Kind {
	return IntegrationKind
}

// just returns itself for now
func (integration *Integration) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = integration.ID()
	return foo
}

func (integration *Integration) SetID(id data.ID) {
	integration.Id = id.String()
}

func (integration *Integration) ID() data.ID {
	return data.ID(integration.Id)
}

func (integration *Integration) SetIntegrationCredential(integrationCredentialsArgument IntegrationCredentials) error {
	integration.IntegrationCredentialId = integrationCredentialsArgument.ID().String()
	return nil
}

func (integration *Integration) IntegrationCredential(db data.DB) (IntegrationCredentials, error) {
	if integration.IntegrationCredentialId == "" {
		return nil, ErrEmptyLink
	}

	m := ModelFor(data.Kind(integration.IntegrationCredentialKind))
	integrationCredentials := m.(IntegrationCredentials)

	id, _ := db.ParseID(integration.IntegrationCredentialId)

	integrationCredentials.SetID(id)
	return integrationCredentials, db.PopulateByID(integrationCredentials)

}

func (integration *Integration) SetOwner(userArgument *User) error {
	integration.OwnerId = userArgument.ID().String()
	return nil
}

func (integration *Integration) Owner(db data.DB) (*User, error) {
	if integration.OwnerId == "" {
		return nil, ErrEmptyLink
	}

	userArgument := NewUser()
	id, _ := db.ParseID(integration.OwnerId)
	userArgument.SetID(id)
	return userArgument, db.PopulateByID(userArgument)

}

func (integration *Integration) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := integration.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := integration.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(integration); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

// BSON {{{
func (integration *Integration) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Domain string `json:"domain" bson:"domain"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		Vendor string `json:"vendor" bson:"vendor"`

		IntegrationCredentialId string `json:"integration_credential_id" bson:"integration_credential_id"`

		IntegrationCredentialKind string `json:"integration_credential_kind" bson:"integration_credential_kind"`

		OwnerId string `json:"owner_id" bson:"owner_id"`
	}{

		CreatedAt: integration.CreatedAt,

		DeletedAt: integration.DeletedAt,

		Domain: integration.Domain,

		Name: integration.Name,

		UpdatedAt: integration.UpdatedAt,

		Vendor: integration.Vendor,

		IntegrationCredentialId: integration.IntegrationCredentialId,

		IntegrationCredentialKind: integration.IntegrationCredentialKind,

		OwnerId: integration.OwnerId,
	}, nil

}

func (integration *Integration) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Domain string `json:"domain" bson:"domain"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		Vendor string `json:"vendor" bson:"vendor"`

		IntegrationCredentialId string `json:"integration_credential_id" bson:"integration_credential_id"`

		IntegrationCredentialKind string `json:"integration_credential_kind" bson:"integration_credential_kind"`

		OwnerId string `json:"owner_id" bson:"owner_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	integration.CreatedAt = tmp.CreatedAt

	integration.DeletedAt = tmp.DeletedAt

	integration.Domain = tmp.Domain

	integration.Id = tmp.Id.Hex()

	integration.Name = tmp.Name

	integration.UpdatedAt = tmp.UpdatedAt

	integration.Vendor = tmp.Vendor

	integration.IntegrationCredentialId = tmp.IntegrationCredentialId

	integration.IntegrationCredentialKind = tmp.IntegrationCredentialKind

	integration.OwnerId = tmp.OwnerId

	return nil

}

// BSON }}}

func (integration *Integration) FromStructure(structure map[string]interface{}) {

	if val, ok := structure["id"]; ok {
		integration.Id = val.(string)
	}

	if val, ok := structure["created_at"]; ok {
		integration.CreatedAt = val.(time.Time)
	}

	if val, ok := structure["updated_at"]; ok {
		integration.UpdatedAt = val.(time.Time)
	}

	if val, ok := structure["deleted_at"]; ok {
		integration.DeletedAt = val.(time.Time)
	}

	if val, ok := structure["name"]; ok {
		integration.Name = val.(string)
	}

	if val, ok := structure["domain"]; ok {
		integration.Domain = val.(string)
	}

	if val, ok := structure["vendor"]; ok {
		integration.Vendor = val.(string)
	}

	if val, ok := structure["owner_id"]; ok {
		integration.OwnerId = val.(string)
	}

	if val, ok := structure["integration_credential_id"]; ok {
		integration.IntegrationCredentialId = val.(string)
	}

	if val, ok := structure["integration_credential_kind"]; ok {
		integration.IntegrationCredentialKind = val.(string)
	}

}

var IntegrationStructure = map[string]metis.Primitive{

	"id": 9,

	"created_at": 4,

	"updated_at": 4,

	"deleted_at": 4,

	"name": 3,

	"domain": 3,

	"vendor": 3,

	"owner_id": 9,

	"integration_credential_id": 9,

	"integration_credential_kind": 3,
}
