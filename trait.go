package models

// THIS FILE GENERATED BY METIS

import (
	"time"

	"github.com/elos/d"
	"github.com/elos/d/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// this type def generated by metis
type Trait struct {
	AttributesIDs []string   `json:"attributes_ids" bson:"attributes_ids"`
	ClassID       string     `json:"class_id" bson:"class_id"`
	CreatedAt     *time.Time `json:"created_at" bson:"created_at"`
	Id            string     `json:"id" bson:"_id,omitempty"`
	Name          string     `json:"name" bson:"name"`
	Type          string     `json:"type" bson:"type"`
	UpdatedAt     *time.Time `json:"updated_at" bson:"updated_at"`
}

func NewTrait() *Trait {
	return &Trait{}
}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (trait *Trait) Kind() d.Kind {
	return TraitKind
}

// just returns itself for now
func (trait *Trait) Concerned() []d.ID {
	foo := make([]d.ID, 1)
	foo[0] = trait.ID()
	return foo
}

func (trait *Trait) SetID(id d.ID) {
	trait.Id = id.String()
}

func (trait *Trait) ID() d.ID {
	return d.ID(trait.Id)
}

func (trait *Trait) IncludeAttribute(attribute *Attribute) {
	trait.AttributesIDs = append(trait.AttributesIDs, attribute.ID().String())
}

func (trait *Trait) ExcludeAttribute(attribute *Attribute) {
	tmp := make([]string, 0)
	id := attribute.ID().String()
	for _, s := range trait.AttributesIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	trait.AttributesIDs = tmp
}

func (trait *Trait) AttributesIter(store d.Store) (d.ModelIterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(trait.AttributesIDs), store), nil
}

func (trait *Trait) Attributes(store d.Store) ([]*Attribute, error) {

	attributes := make([]*Attribute, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(trait.AttributesIDs), store)
	attribute := NewAttribute()
	for iter.Next(attribute) {
		attributes = append(attributes, attribute)
		attribute = NewAttribute()
	}
	return attributes, nil
}

func (trait *Trait) SetClass(class *Class) error {
	trait.ClassID = class.ID().String()
	return nil
}

func (trait *Trait) Class(store d.Store) (*Class, error) {
	if trait.ClassID == "" {
		return nil, ErrEmptyLink
	}

	class := NewClass()
	pid, _ := mongo.ParseObjectID(trait.ClassID)
	class.SetID(d.ID(pid.Hex()))
	return class, store.PopulateByID(class)

}

func (trait *Trait) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt *time.Time `json:"created_at" bson:"created_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		Type string `json:"type" bson:"type"`

		UpdatedAt *time.Time `json:"updated_at" bson:"updated_at"`

		AttributesIDs []string `json:"attributes_ids" bson:"attributes_ids"`

		ClassID string `json:"class_id" bson:"class_id"`
	}{

		CreatedAt: trait.CreatedAt,

		Name: trait.Name,

		Type: trait.Type,

		UpdatedAt: trait.UpdatedAt,

		AttributesIDs: trait.AttributesIDs,

		ClassID: trait.ClassID,
	}, nil

}

func (trait *Trait) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt *time.Time `json:"created_at" bson:"created_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		Type string `json:"type" bson:"type"`

		UpdatedAt *time.Time `json:"updated_at" bson:"updated_at"`

		AttributesIDs []string `json:"attributes_ids" bson:"attributes_ids"`

		ClassID string `json:"class_id" bson:"class_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	trait.CreatedAt = tmp.CreatedAt

	trait.Id = tmp.Id.Hex()

	trait.Name = tmp.Name

	trait.Type = tmp.Type

	trait.UpdatedAt = tmp.UpdatedAt

	trait.AttributesIDs = tmp.AttributesIDs

	trait.ClassID = tmp.ClassID

	return nil

}
