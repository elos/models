package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Class struct {
	CreatedAt  time.Time `json:"created_at" bson:"created_at"`
	Id         string    `json:"id" bson:"_id,omitempty"`
	Key        string    `json:"key" bson:"key"`
	LinksIDs   []string  `json:"links_ids" bson:"links_ids"`
	Name       string    `json:"name" bson:"name"`
	ObjectsIDs []string  `json:"objects_ids" bson:"objects_ids"`
	OntologyID string    `json:"ontology_id" bson:"ontology_id"`
	OwnerID    string    `json:"owner_id" bson:"owner_id"`
	TraitsIDs  []string  `json:"traits_ids" bson:"traits_ids"`
	UpdatedAt  time.Time `json:"updated_at" bson:"updated_at"`
}

func NewClass() *Class {
	return &Class{}
}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (class *Class) Kind() data.Kind {
	return ClassKind
}

// just returns itself for now
func (class *Class) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = class.ID()
	return foo
}

func (class *Class) SetID(id data.ID) {
	class.Id = id.String()
}

func (class *Class) ID() data.ID {
	return data.ID(class.Id)
}

func (class *Class) IncludeLink(link *Link) {
	class.LinksIDs = append(class.LinksIDs, link.ID().String())
}

func (class *Class) ExcludeLink(link *Link) {
	tmp := make([]string, 0)
	id := link.ID().String()
	for _, s := range class.LinksIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	class.LinksIDs = tmp
}

func (class *Class) LinksIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(class.LinksIDs), db), nil
}

func (class *Class) Links(db data.DB) ([]*Link, error) {

	links := make([]*Link, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(class.LinksIDs), db)
	link := NewLink()
	for iter.Next(link) {
		links = append(links, link)
		link = NewLink()
	}
	return links, nil
}

func (class *Class) IncludeObject(object *Object) {
	class.ObjectsIDs = append(class.ObjectsIDs, object.ID().String())
}

func (class *Class) ExcludeObject(object *Object) {
	tmp := make([]string, 0)
	id := object.ID().String()
	for _, s := range class.ObjectsIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	class.ObjectsIDs = tmp
}

func (class *Class) ObjectsIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(class.ObjectsIDs), db), nil
}

func (class *Class) Objects(db data.DB) ([]*Object, error) {

	objects := make([]*Object, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(class.ObjectsIDs), db)
	object := NewObject()
	for iter.Next(object) {
		objects = append(objects, object)
		object = NewObject()
	}
	return objects, nil
}

func (class *Class) SetOntology(ontology *Ontology) error {
	class.OntologyID = ontology.ID().String()
	return nil
}

func (class *Class) Ontology(db data.DB) (*Ontology, error) {
	if class.OntologyID == "" {
		return nil, ErrEmptyLink
	}

	ontology := NewOntology()
	pid, _ := mongo.ParseObjectID(class.OntologyID)
	ontology.SetID(data.ID(pid.Hex()))
	return ontology, db.PopulateByID(ontology)

}

func (class *Class) OntologyOrCreate(db data.DB) (*Ontology, error) {
	ontology, err := class.Ontology(db)

	if err == ErrEmptyLink {
		ontology := NewOntology()
		ontology.SetID(db.NewID())
		if err := class.SetOntology(ontology); err != nil {
			return nil, err
		}

		if err := db.Save(ontology); err != nil {
			return nil, err
		}

		if err := db.Save(class); err != nil {
			return nil, err
		}

		return ontology, nil
	} else {
		return ontology, err
	}
}

func (class *Class) SetOwner(user *User) error {
	class.OwnerID = user.ID().String()
	return nil
}

func (class *Class) Owner(db data.DB) (*User, error) {
	if class.OwnerID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(class.OwnerID)
	user.SetID(data.ID(pid.Hex()))
	return user, db.PopulateByID(user)

}

func (class *Class) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := class.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := class.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(class); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

func (class *Class) IncludeTrait(trait *Trait) {
	class.TraitsIDs = append(class.TraitsIDs, trait.ID().String())
}

func (class *Class) ExcludeTrait(trait *Trait) {
	tmp := make([]string, 0)
	id := trait.ID().String()
	for _, s := range class.TraitsIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	class.TraitsIDs = tmp
}

func (class *Class) TraitsIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(class.TraitsIDs), db), nil
}

func (class *Class) Traits(db data.DB) ([]*Trait, error) {

	traits := make([]*Trait, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(class.TraitsIDs), db)
	trait := NewTrait()
	for iter.Next(trait) {
		traits = append(traits, trait)
		trait = NewTrait()
	}
	return traits, nil
}

// BSON {{{
func (class *Class) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Key string `json:"key" bson:"key"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		LinksIDs []string `json:"links_ids" bson:"links_ids"`

		ObjectsIDs []string `json:"objects_ids" bson:"objects_ids"`

		OntologyID string `json:"ontology_id" bson:"ontology_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		TraitsIDs []string `json:"traits_ids" bson:"traits_ids"`
	}{

		CreatedAt: class.CreatedAt,

		Key: class.Key,

		Name: class.Name,

		UpdatedAt: class.UpdatedAt,

		LinksIDs: class.LinksIDs,

		ObjectsIDs: class.ObjectsIDs,

		OntologyID: class.OntologyID,

		OwnerID: class.OwnerID,

		TraitsIDs: class.TraitsIDs,
	}, nil

}

func (class *Class) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Key string `json:"key" bson:"key"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		LinksIDs []string `json:"links_ids" bson:"links_ids"`

		ObjectsIDs []string `json:"objects_ids" bson:"objects_ids"`

		OntologyID string `json:"ontology_id" bson:"ontology_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		TraitsIDs []string `json:"traits_ids" bson:"traits_ids"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	class.CreatedAt = tmp.CreatedAt

	class.Id = tmp.Id.Hex()

	class.Key = tmp.Key

	class.Name = tmp.Name

	class.UpdatedAt = tmp.UpdatedAt

	class.LinksIDs = tmp.LinksIDs

	class.ObjectsIDs = tmp.ObjectsIDs

	class.OntologyID = tmp.OntologyID

	class.OwnerID = tmp.OwnerID

	class.TraitsIDs = tmp.TraitsIDs

	return nil

}

// BSON }}}
