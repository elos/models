package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Tag struct {
	CreatedAt time.Time `json:"created_at" bson:"created_at"`
	DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`
	EventsIDs []string  `json:"events_ids" bson:"events_ids"`
	Id        string    `json:"id" bson:"_id,omitempty"`
	Name      string    `json:"name" bson:"name"`
	OwnerID   string    `json:"owner_id" bson:"owner_id"`
	UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`
}

func NewTag() *Tag {
	return &Tag{}
}

func FindTag(db data.DB, id data.ID) (*Tag, error) {

	tag := NewTag()
	tag.SetID(id)

	return tag, db.PopulateByID(tag)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (tag *Tag) Kind() data.Kind {
	return TagKind
}

// just returns itself for now
func (tag *Tag) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = tag.ID()
	return foo
}

func (tag *Tag) SetID(id data.ID) {
	tag.Id = id.String()
}

func (tag *Tag) ID() data.ID {
	return data.ID(tag.Id)
}

func (tag *Tag) IncludeEvent(event *Event) {
	tag.EventsIDs = append(tag.EventsIDs, event.ID().String())
}

func (tag *Tag) ExcludeEvent(event *Event) {
	tmp := make([]string, 0)
	id := event.ID().String()
	for _, s := range tag.EventsIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	tag.EventsIDs = tmp
}

func (tag *Tag) EventsIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(tag.EventsIDs), db), nil
}

func (tag *Tag) Events(db data.DB) ([]*Event, error) {

	events := make([]*Event, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(tag.EventsIDs), db)
	event := NewEvent()
	for iter.Next(event) {
		events = append(events, event)
		event = NewEvent()
	}
	return events, nil
}

func (tag *Tag) SetOwner(user *User) error {
	tag.OwnerID = user.ID().String()
	return nil
}

func (tag *Tag) Owner(db data.DB) (*User, error) {
	if tag.OwnerID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(tag.OwnerID)
	user.SetID(data.ID(pid.Hex()))
	return user, db.PopulateByID(user)

}

func (tag *Tag) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := tag.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := tag.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(tag); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

// BSON {{{
func (tag *Tag) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		EventsIDs []string `json:"events_ids" bson:"events_ids"`

		OwnerID string `json:"owner_id" bson:"owner_id"`
	}{

		CreatedAt: tag.CreatedAt,

		DeletedAt: tag.DeletedAt,

		Name: tag.Name,

		UpdatedAt: tag.UpdatedAt,

		EventsIDs: tag.EventsIDs,

		OwnerID: tag.OwnerID,
	}, nil

}

func (tag *Tag) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		EventsIDs []string `json:"events_ids" bson:"events_ids"`

		OwnerID string `json:"owner_id" bson:"owner_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	tag.CreatedAt = tmp.CreatedAt

	tag.DeletedAt = tmp.DeletedAt

	tag.Id = tmp.Id.Hex()

	tag.Name = tmp.Name

	tag.UpdatedAt = tmp.UpdatedAt

	tag.EventsIDs = tmp.EventsIDs

	tag.OwnerID = tmp.OwnerID

	return nil

}

// BSON }}}
