package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Calendar struct {
	BaseScheduleID   string            `json:"base_schedule_id" bson:"base_schedule_id"`
	CreatedAt        time.Time         `json:"created_at" bson:"created_at"`
	CurrentFixtureID string            `json:"current_fixture_id" bson:"current_fixture_id"`
	Id               string            `json:"id" bson:"_id,omitempty"`
	Name             string            `json:"name" bson:"name"`
	OwnerID          string            `json:"owner_id" bson:"owner_id"`
	PersonID         string            `json:"person_id" bson:"person_id"`
	UpdatedAt        time.Time         `json:"updated_at" bson:"updated_at"`
	WeekdaySchedules map[string]string `json:"weekday_schedules" bson:"weekday_schedules"`
	YeardaySchedules map[string]string `json:"yearday_schedules" bson:"yearday_schedules"`
}

func NewCalendar() *Calendar {
	return &Calendar{}
}

func FindCalendar(db data.DB, id data.ID) (*Calendar, error) {

	calendar := NewCalendar()
	calendar.SetID(id)

	return calendar, db.PopulateByID(calendar)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (calendar *Calendar) Kind() data.Kind {
	return CalendarKind
}

// just returns itself for now
func (calendar *Calendar) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = calendar.ID()
	return foo
}

func (calendar *Calendar) SetID(id data.ID) {
	calendar.Id = id.String()
}

func (calendar *Calendar) ID() data.ID {
	return data.ID(calendar.Id)
}

func (calendar *Calendar) SetBaseSchedule(schedule *Schedule) error {
	calendar.BaseScheduleID = schedule.ID().String()
	return nil
}

func (calendar *Calendar) BaseSchedule(db data.DB) (*Schedule, error) {
	if calendar.BaseScheduleID == "" {
		return nil, ErrEmptyLink
	}

	schedule := NewSchedule()
	pid, _ := mongo.ParseObjectID(calendar.BaseScheduleID)
	schedule.SetID(data.ID(pid.Hex()))
	return schedule, db.PopulateByID(schedule)

}

func (calendar *Calendar) BaseScheduleOrCreate(db data.DB) (*Schedule, error) {
	schedule, err := calendar.BaseSchedule(db)

	if err == ErrEmptyLink {
		schedule := NewSchedule()
		schedule.SetID(db.NewID())
		if err := calendar.SetBaseSchedule(schedule); err != nil {
			return nil, err
		}

		if err := db.Save(schedule); err != nil {
			return nil, err
		}

		if err := db.Save(calendar); err != nil {
			return nil, err
		}

		return schedule, nil
	} else {
		return schedule, err
	}
}

func (calendar *Calendar) SetCurrentFixture(fixture *Fixture) error {
	calendar.CurrentFixtureID = fixture.ID().String()
	return nil
}

func (calendar *Calendar) CurrentFixture(db data.DB) (*Fixture, error) {
	if calendar.CurrentFixtureID == "" {
		return nil, ErrEmptyLink
	}

	fixture := NewFixture()
	pid, _ := mongo.ParseObjectID(calendar.CurrentFixtureID)
	fixture.SetID(data.ID(pid.Hex()))
	return fixture, db.PopulateByID(fixture)

}

func (calendar *Calendar) CurrentFixtureOrCreate(db data.DB) (*Fixture, error) {
	fixture, err := calendar.CurrentFixture(db)

	if err == ErrEmptyLink {
		fixture := NewFixture()
		fixture.SetID(db.NewID())
		if err := calendar.SetCurrentFixture(fixture); err != nil {
			return nil, err
		}

		if err := db.Save(fixture); err != nil {
			return nil, err
		}

		if err := db.Save(calendar); err != nil {
			return nil, err
		}

		return fixture, nil
	} else {
		return fixture, err
	}
}

func (calendar *Calendar) SetOwner(user *User) error {
	calendar.OwnerID = user.ID().String()
	return nil
}

func (calendar *Calendar) Owner(db data.DB) (*User, error) {
	if calendar.OwnerID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(calendar.OwnerID)
	user.SetID(data.ID(pid.Hex()))
	return user, db.PopulateByID(user)

}

func (calendar *Calendar) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := calendar.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := calendar.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(calendar); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

func (calendar *Calendar) SetPerson(person *Person) error {
	calendar.PersonID = person.ID().String()
	return nil
}

func (calendar *Calendar) Person(db data.DB) (*Person, error) {
	if calendar.PersonID == "" {
		return nil, ErrEmptyLink
	}

	person := NewPerson()
	pid, _ := mongo.ParseObjectID(calendar.PersonID)
	person.SetID(data.ID(pid.Hex()))
	return person, db.PopulateByID(person)

}

func (calendar *Calendar) PersonOrCreate(db data.DB) (*Person, error) {
	person, err := calendar.Person(db)

	if err == ErrEmptyLink {
		person := NewPerson()
		person.SetID(db.NewID())
		if err := calendar.SetPerson(person); err != nil {
			return nil, err
		}

		if err := db.Save(person); err != nil {
			return nil, err
		}

		if err := db.Save(calendar); err != nil {
			return nil, err
		}

		return person, nil
	} else {
		return person, err
	}
}

// BSON {{{
func (calendar *Calendar) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		WeekdaySchedules map[string]string `json:"weekday_schedules" bson:"weekday_schedules"`

		YeardaySchedules map[string]string `json:"yearday_schedules" bson:"yearday_schedules"`

		BaseScheduleID string `json:"base_schedule_id" bson:"base_schedule_id"`

		CurrentFixtureID string `json:"current_fixture_id" bson:"current_fixture_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		PersonID string `json:"person_id" bson:"person_id"`
	}{

		CreatedAt: calendar.CreatedAt,

		Name: calendar.Name,

		UpdatedAt: calendar.UpdatedAt,

		WeekdaySchedules: calendar.WeekdaySchedules,

		YeardaySchedules: calendar.YeardaySchedules,

		BaseScheduleID: calendar.BaseScheduleID,

		CurrentFixtureID: calendar.CurrentFixtureID,

		OwnerID: calendar.OwnerID,

		PersonID: calendar.PersonID,
	}, nil

}

func (calendar *Calendar) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		WeekdaySchedules map[string]string `json:"weekday_schedules" bson:"weekday_schedules"`

		YeardaySchedules map[string]string `json:"yearday_schedules" bson:"yearday_schedules"`

		BaseScheduleID string `json:"base_schedule_id" bson:"base_schedule_id"`

		CurrentFixtureID string `json:"current_fixture_id" bson:"current_fixture_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		PersonID string `json:"person_id" bson:"person_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	calendar.CreatedAt = tmp.CreatedAt

	calendar.Id = tmp.Id.Hex()

	calendar.Name = tmp.Name

	calendar.UpdatedAt = tmp.UpdatedAt

	calendar.WeekdaySchedules = tmp.WeekdaySchedules

	calendar.YeardaySchedules = tmp.YeardaySchedules

	calendar.BaseScheduleID = tmp.BaseScheduleID

	calendar.CurrentFixtureID = tmp.CurrentFixtureID

	calendar.OwnerID = tmp.OwnerID

	calendar.PersonID = tmp.PersonID

	return nil

}

// BSON }}}
