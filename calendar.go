package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Calendar struct {
	BaseScheduleID    string            `json:"base_schedule_id" bson:"base_schedule_id"`
	CreatedAt         time.Time         `json:"created_at" bson:"created_at"`
	DeletedAt         time.Time         `json:"deleted_at" bson:"deleted_at"`
	Id                string            `json:"id" bson:"_id,omitempty"`
	ManifestFixtureID string            `json:"manifest_fixture_id" bson:"manifest_fixture_id"`
	Name              string            `json:"name" bson:"name"`
	OwnerID           string            `json:"owner_id" bson:"owner_id"`
	UpdatedAt         time.Time         `json:"updated_at" bson:"updated_at"`
	WeekdaySchedules  map[string]string `json:"weekday_schedules" bson:"weekday_schedules"`
	YeardaySchedules  map[string]string `json:"yearday_schedules" bson:"yearday_schedules"`
}

func NewCalendar() *Calendar {
	return &Calendar{}
}

func FindCalendar(db data.DB, id data.ID) (*Calendar, error) {

	calendar := NewCalendar()
	calendar.SetID(id)

	return calendar, db.PopulateByID(calendar)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (calendar *Calendar) Kind() data.Kind {
	return CalendarKind
}

// just returns itself for now
func (calendar *Calendar) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = calendar.ID()
	return foo
}

func (calendar *Calendar) SetID(id data.ID) {
	calendar.Id = id.String()
}

func (calendar *Calendar) ID() data.ID {
	return data.ID(calendar.Id)
}

func (calendar *Calendar) SetBaseSchedule(scheduleArgument *Schedule) error {
	calendar.BaseScheduleID = scheduleArgument.ID().String()
	return nil
}

func (calendar *Calendar) BaseSchedule(db data.DB) (*Schedule, error) {
	if calendar.BaseScheduleID == "" {
		return nil, ErrEmptyLink
	}

	scheduleArgument := NewSchedule()
	pid, _ := mongo.ParseObjectID(calendar.BaseScheduleID)
	scheduleArgument.SetID(data.ID(pid.Hex()))
	return scheduleArgument, db.PopulateByID(scheduleArgument)

}

func (calendar *Calendar) BaseScheduleOrCreate(db data.DB) (*Schedule, error) {
	schedule, err := calendar.BaseSchedule(db)

	if err == ErrEmptyLink {
		schedule := NewSchedule()
		schedule.SetID(db.NewID())
		if err := calendar.SetBaseSchedule(schedule); err != nil {
			return nil, err
		}

		if err := db.Save(schedule); err != nil {
			return nil, err
		}

		if err := db.Save(calendar); err != nil {
			return nil, err
		}

		return schedule, nil
	} else {
		return schedule, err
	}
}

func (calendar *Calendar) SetManifestFixture(fixtureArgument *Fixture) error {
	calendar.ManifestFixtureID = fixtureArgument.ID().String()
	return nil
}

func (calendar *Calendar) ManifestFixture(db data.DB) (*Fixture, error) {
	if calendar.ManifestFixtureID == "" {
		return nil, ErrEmptyLink
	}

	fixtureArgument := NewFixture()
	pid, _ := mongo.ParseObjectID(calendar.ManifestFixtureID)
	fixtureArgument.SetID(data.ID(pid.Hex()))
	return fixtureArgument, db.PopulateByID(fixtureArgument)

}

func (calendar *Calendar) ManifestFixtureOrCreate(db data.DB) (*Fixture, error) {
	fixture, err := calendar.ManifestFixture(db)

	if err == ErrEmptyLink {
		fixture := NewFixture()
		fixture.SetID(db.NewID())
		if err := calendar.SetManifestFixture(fixture); err != nil {
			return nil, err
		}

		if err := db.Save(fixture); err != nil {
			return nil, err
		}

		if err := db.Save(calendar); err != nil {
			return nil, err
		}

		return fixture, nil
	} else {
		return fixture, err
	}
}

func (calendar *Calendar) SetOwner(userArgument *User) error {
	calendar.OwnerID = userArgument.ID().String()
	return nil
}

func (calendar *Calendar) Owner(db data.DB) (*User, error) {
	if calendar.OwnerID == "" {
		return nil, ErrEmptyLink
	}

	userArgument := NewUser()
	pid, _ := mongo.ParseObjectID(calendar.OwnerID)
	userArgument.SetID(data.ID(pid.Hex()))
	return userArgument, db.PopulateByID(userArgument)

}

func (calendar *Calendar) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := calendar.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := calendar.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(calendar); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

// BSON {{{
func (calendar *Calendar) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		WeekdaySchedules map[string]string `json:"weekday_schedules" bson:"weekday_schedules"`

		YeardaySchedules map[string]string `json:"yearday_schedules" bson:"yearday_schedules"`

		BaseScheduleID string `json:"base_schedule_id" bson:"base_schedule_id"`

		ManifestFixtureID string `json:"manifest_fixture_id" bson:"manifest_fixture_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`
	}{

		CreatedAt: calendar.CreatedAt,

		DeletedAt: calendar.DeletedAt,

		Name: calendar.Name,

		UpdatedAt: calendar.UpdatedAt,

		WeekdaySchedules: calendar.WeekdaySchedules,

		YeardaySchedules: calendar.YeardaySchedules,

		BaseScheduleID: calendar.BaseScheduleID,

		ManifestFixtureID: calendar.ManifestFixtureID,

		OwnerID: calendar.OwnerID,
	}, nil

}

func (calendar *Calendar) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		WeekdaySchedules map[string]string `json:"weekday_schedules" bson:"weekday_schedules"`

		YeardaySchedules map[string]string `json:"yearday_schedules" bson:"yearday_schedules"`

		BaseScheduleID string `json:"base_schedule_id" bson:"base_schedule_id"`

		ManifestFixtureID string `json:"manifest_fixture_id" bson:"manifest_fixture_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	calendar.CreatedAt = tmp.CreatedAt

	calendar.DeletedAt = tmp.DeletedAt

	calendar.Id = tmp.Id.Hex()

	calendar.Name = tmp.Name

	calendar.UpdatedAt = tmp.UpdatedAt

	calendar.WeekdaySchedules = tmp.WeekdaySchedules

	calendar.YeardaySchedules = tmp.YeardaySchedules

	calendar.BaseScheduleID = tmp.BaseScheduleID

	calendar.ManifestFixtureID = tmp.ManifestFixtureID

	calendar.OwnerID = tmp.OwnerID

	return nil

}

// BSON }}}
