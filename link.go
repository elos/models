package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Link struct {
	ClassID      string     `json:"class_id" bson:"class_id"`
	Codomain     string     `json:"codomain" bson:"codomain"`
	CreatedAt    *time.Time `json:"created_at" bson:"created_at"`
	Id           string     `json:"id" bson:"_id,omitempty"`
	Inverse      string     `json:"inverse" bson:"inverse"`
	Multiplicity string     `json:"multiplicity" bson:"multiplicity"`
	Name         string     `json:"name" bson:"name"`
	RelationsIDs []string   `json:"relations_ids" bson:"relations_ids"`
	UpdatedAt    *time.Time `json:"updated_at" bson:"updated_at"`
}

func NewLink() *Link {
	return &Link{}
}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (link *Link) Kind() data.Kind {
	return LinkKind
}

// just returns itself for now
func (link *Link) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = link.ID()
	return foo
}

func (link *Link) SetID(id data.ID) {
	link.Id = id.String()
}

func (link *Link) ID() data.ID {
	return data.ID(link.Id)
}

func (link *Link) SetClass(class *Class) error {
	link.ClassID = class.ID().String()
	return nil
}

func (link *Link) Class(store data.Store) (*Class, error) {
	if link.ClassID == "" {
		return nil, ErrEmptyLink
	}

	class := NewClass()
	pid, _ := mongo.ParseObjectID(link.ClassID)
	class.SetID(data.ID(pid.Hex()))
	return class, store.PopulateByID(class)

}

func (link *Link) IncludeRelation(relation *Relation) {
	link.RelationsIDs = append(link.RelationsIDs, relation.ID().String())
}

func (link *Link) ExcludeRelation(relation *Relation) {
	tmp := make([]string, 0)
	id := relation.ID().String()
	for _, s := range link.RelationsIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	link.RelationsIDs = tmp
}

func (link *Link) RelationsIter(store data.Store) (data.ModelIterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(link.RelationsIDs), store), nil
}

func (link *Link) Relations(store data.Store) ([]*Relation, error) {

	relations := make([]*Relation, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(link.RelationsIDs), store)
	relation := NewRelation()
	for iter.Next(relation) {
		relations = append(relations, relation)
		relation = NewRelation()
	}
	return relations, nil
}

func (link *Link) GetBSON() (interface{}, error) {

	return struct {
		Codomain string `json:"codomain" bson:"codomain"`

		CreatedAt *time.Time `json:"created_at" bson:"created_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Inverse string `json:"inverse" bson:"inverse"`

		Multiplicity string `json:"multiplicity" bson:"multiplicity"`

		Name string `json:"name" bson:"name"`

		UpdatedAt *time.Time `json:"updated_at" bson:"updated_at"`

		ClassID string `json:"class_id" bson:"class_id"`

		RelationsIDs []string `json:"relations_ids" bson:"relations_ids"`
	}{

		Codomain: link.Codomain,

		CreatedAt: link.CreatedAt,

		Inverse: link.Inverse,

		Multiplicity: link.Multiplicity,

		Name: link.Name,

		UpdatedAt: link.UpdatedAt,

		ClassID: link.ClassID,

		RelationsIDs: link.RelationsIDs,
	}, nil

}

func (link *Link) SetBSON(raw bson.Raw) error {

	tmp := struct {
		Codomain string `json:"codomain" bson:"codomain"`

		CreatedAt *time.Time `json:"created_at" bson:"created_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Inverse string `json:"inverse" bson:"inverse"`

		Multiplicity string `json:"multiplicity" bson:"multiplicity"`

		Name string `json:"name" bson:"name"`

		UpdatedAt *time.Time `json:"updated_at" bson:"updated_at"`

		ClassID string `json:"class_id" bson:"class_id"`

		RelationsIDs []string `json:"relations_ids" bson:"relations_ids"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	link.Codomain = tmp.Codomain

	link.CreatedAt = tmp.CreatedAt

	link.Id = tmp.Id.Hex()

	link.Inverse = tmp.Inverse

	link.Multiplicity = tmp.Multiplicity

	link.Name = tmp.Name

	link.UpdatedAt = tmp.UpdatedAt

	link.ClassID = tmp.ClassID

	link.RelationsIDs = tmp.RelationsIDs

	return nil

}
