package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Link struct {
	CreatedAt  time.Time      `json:"created_at" bson:"created_at"`
	DeletedAt  time.Time      `json:"deleted_at" bson:"deleted_at"`
	Id         string         `json:"id" bson:"_id,omitempty"`
	Ids        map[int]string `json:"ids" bson:"ids"`
	ObjectID   string         `json:"object_id" bson:"object_id"`
	OwnerID    string         `json:"owner_id" bson:"owner_id"`
	RelationID string         `json:"relation_id" bson:"relation_id"`
	UpdatedAt  time.Time      `json:"updated_at" bson:"updated_at"`
}

func NewLink() *Link {
	return &Link{}
}

func FindLink(db data.DB, id data.ID) (*Link, error) {

	link := NewLink()
	link.SetID(id)

	return link, db.PopulateByID(link)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (link *Link) Kind() data.Kind {
	return LinkKind
}

// just returns itself for now
func (link *Link) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = link.ID()
	return foo
}

func (link *Link) SetID(id data.ID) {
	link.Id = id.String()
}

func (link *Link) ID() data.ID {
	return data.ID(link.Id)
}

func (link *Link) SetObject(object *Object) error {
	link.ObjectID = object.ID().String()
	return nil
}

func (link *Link) Object(db data.DB) (*Object, error) {
	if link.ObjectID == "" {
		return nil, ErrEmptyLink
	}

	object := NewObject()
	pid, _ := mongo.ParseObjectID(link.ObjectID)
	object.SetID(data.ID(pid.Hex()))
	return object, db.PopulateByID(object)

}

func (link *Link) ObjectOrCreate(db data.DB) (*Object, error) {
	object, err := link.Object(db)

	if err == ErrEmptyLink {
		object := NewObject()
		object.SetID(db.NewID())
		if err := link.SetObject(object); err != nil {
			return nil, err
		}

		if err := db.Save(object); err != nil {
			return nil, err
		}

		if err := db.Save(link); err != nil {
			return nil, err
		}

		return object, nil
	} else {
		return object, err
	}
}

func (link *Link) SetOwner(user *User) error {
	link.OwnerID = user.ID().String()
	return nil
}

func (link *Link) Owner(db data.DB) (*User, error) {
	if link.OwnerID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(link.OwnerID)
	user.SetID(data.ID(pid.Hex()))
	return user, db.PopulateByID(user)

}

func (link *Link) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := link.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := link.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(link); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

func (link *Link) SetRelation(relation *Relation) error {
	link.RelationID = relation.ID().String()
	return nil
}

func (link *Link) Relation(db data.DB) (*Relation, error) {
	if link.RelationID == "" {
		return nil, ErrEmptyLink
	}

	relation := NewRelation()
	pid, _ := mongo.ParseObjectID(link.RelationID)
	relation.SetID(data.ID(pid.Hex()))
	return relation, db.PopulateByID(relation)

}

func (link *Link) RelationOrCreate(db data.DB) (*Relation, error) {
	relation, err := link.Relation(db)

	if err == ErrEmptyLink {
		relation := NewRelation()
		relation.SetID(db.NewID())
		if err := link.SetRelation(relation); err != nil {
			return nil, err
		}

		if err := db.Save(relation); err != nil {
			return nil, err
		}

		if err := db.Save(link); err != nil {
			return nil, err
		}

		return relation, nil
	} else {
		return relation, err
	}
}

// BSON {{{
func (link *Link) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Ids map[int]string `json:"ids" bson:"ids"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		ObjectID string `json:"object_id" bson:"object_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		RelationID string `json:"relation_id" bson:"relation_id"`
	}{

		CreatedAt: link.CreatedAt,

		DeletedAt: link.DeletedAt,

		Ids: link.Ids,

		UpdatedAt: link.UpdatedAt,

		ObjectID: link.ObjectID,

		OwnerID: link.OwnerID,

		RelationID: link.RelationID,
	}, nil

}

func (link *Link) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Ids map[int]string `json:"ids" bson:"ids"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		ObjectID string `json:"object_id" bson:"object_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		RelationID string `json:"relation_id" bson:"relation_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	link.CreatedAt = tmp.CreatedAt

	link.DeletedAt = tmp.DeletedAt

	link.Id = tmp.Id.Hex()

	link.Ids = tmp.Ids

	link.UpdatedAt = tmp.UpdatedAt

	link.ObjectID = tmp.ObjectID

	link.OwnerID = tmp.OwnerID

	link.RelationID = tmp.RelationID

	return nil

}

// BSON }}}
