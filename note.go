package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Note struct {
	CreatedAt time.Time `json:"created_at" bson:"created_at"`
	DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`
	Id        string    `json:"id" bson:"_id,omitempty"`
	OwnerID   string    `json:"owner_id" bson:"owner_id"`
	Text      string    `json:"text" bson:"text"`
	UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`
}

func NewNote() *Note {
	return &Note{}
}

func FindNote(db data.DB, id data.ID) (*Note, error) {

	note := NewNote()
	note.SetID(id)

	return note, db.PopulateByID(note)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (note *Note) Kind() data.Kind {
	return NoteKind
}

// just returns itself for now
func (note *Note) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = note.ID()
	return foo
}

func (note *Note) SetID(id data.ID) {
	note.Id = id.String()
}

func (note *Note) ID() data.ID {
	return data.ID(note.Id)
}

func (note *Note) SetOwner(userArgument *User) error {
	note.OwnerID = userArgument.ID().String()
	return nil
}

func (note *Note) Owner(db data.DB) (*User, error) {
	if note.OwnerID == "" {
		return nil, ErrEmptyLink
	}

	userArgument := NewUser()
	pid, _ := mongo.ParseObjectID(note.OwnerID)
	userArgument.SetID(data.ID(pid.Hex()))
	return userArgument, db.PopulateByID(userArgument)

}

func (note *Note) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := note.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := note.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(note); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

// BSON {{{
func (note *Note) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Text string `json:"text" bson:"text"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		OwnerID string `json:"owner_id" bson:"owner_id"`
	}{

		CreatedAt: note.CreatedAt,

		DeletedAt: note.DeletedAt,

		Text: note.Text,

		UpdatedAt: note.UpdatedAt,

		OwnerID: note.OwnerID,
	}, nil

}

func (note *Note) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Text string `json:"text" bson:"text"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		OwnerID string `json:"owner_id" bson:"owner_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	note.CreatedAt = tmp.CreatedAt

	note.DeletedAt = tmp.DeletedAt

	note.Id = tmp.Id.Hex()

	note.Text = tmp.Text

	note.UpdatedAt = tmp.UpdatedAt

	note.OwnerID = tmp.OwnerID

	return nil

}

// BSON }}}
