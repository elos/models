package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Group struct {
	Access      int       `json:"access" bson:"access"`
	ContextsIDs []string  `json:"contexts_ids" bson:"contexts_ids"`
	CreatedAt   time.Time `json:"created_at" bson:"created_at"`
	DeletedAt   time.Time `json:"deleted_at" bson:"deleted_at"`
	GranteesIDs []string  `json:"grantees_ids" bson:"grantees_ids"`
	Id          string    `json:"id" bson:"_id,omitempty"`
	Name        string    `json:"name" bson:"name"`
	OwnerID     string    `json:"owner_id" bson:"owner_id"`
	UpdatedAt   time.Time `json:"updated_at" bson:"updated_at"`
}

func NewGroup() *Group {
	return &Group{}
}

func FindGroup(db data.DB, id data.ID) (*Group, error) {

	group := NewGroup()
	group.SetID(id)

	return group, db.PopulateByID(group)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (group *Group) Kind() data.Kind {
	return GroupKind
}

// just returns itself for now
func (group *Group) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = group.ID()
	return foo
}

func (group *Group) SetID(id data.ID) {
	group.Id = id.String()
}

func (group *Group) ID() data.ID {
	return data.ID(group.Id)
}

func (group *Group) IncludeContext(context *Context) {
	group.ContextsIDs = append(group.ContextsIDs, context.ID().String())
}

func (group *Group) ExcludeContext(context *Context) {
	tmp := make([]string, 0)
	id := context.ID().String()
	for _, s := range group.ContextsIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	group.ContextsIDs = tmp
}

func (group *Group) ContextsIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(group.ContextsIDs), db), nil
}

func (group *Group) Contexts(db data.DB) ([]*Context, error) {

	contexts := make([]*Context, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(group.ContextsIDs), db)
	context := NewContext()
	for iter.Next(context) {
		contexts = append(contexts, context)
		context = NewContext()
	}
	return contexts, nil
}

func (group *Group) IncludeGrantee(grantee *User) {
	group.GranteesIDs = append(group.GranteesIDs, grantee.ID().String())
}

func (group *Group) ExcludeGrantee(grantee *User) {
	tmp := make([]string, 0)
	id := grantee.ID().String()
	for _, s := range group.GranteesIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	group.GranteesIDs = tmp
}

func (group *Group) GranteesIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(group.GranteesIDs), db), nil
}

func (group *Group) Grantees(db data.DB) ([]*User, error) {

	grantees := make([]*User, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(group.GranteesIDs), db)
	grantee := NewUser()
	for iter.Next(grantee) {
		grantees = append(grantees, grantee)
		grantee = NewUser()
	}
	return grantees, nil
}

func (group *Group) SetOwner(user *User) error {
	group.OwnerID = user.ID().String()
	return nil
}

func (group *Group) Owner(db data.DB) (*User, error) {
	if group.OwnerID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(group.OwnerID)
	user.SetID(data.ID(pid.Hex()))
	return user, db.PopulateByID(user)

}

func (group *Group) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := group.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := group.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(group); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

// BSON {{{
func (group *Group) GetBSON() (interface{}, error) {

	return struct {
		Access int `json:"access" bson:"access"`

		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		ContextsIDs []string `json:"contexts_ids" bson:"contexts_ids"`

		GranteesIDs []string `json:"grantees_ids" bson:"grantees_ids"`

		OwnerID string `json:"owner_id" bson:"owner_id"`
	}{

		Access: group.Access,

		CreatedAt: group.CreatedAt,

		DeletedAt: group.DeletedAt,

		Name: group.Name,

		UpdatedAt: group.UpdatedAt,

		ContextsIDs: group.ContextsIDs,

		GranteesIDs: group.GranteesIDs,

		OwnerID: group.OwnerID,
	}, nil

}

func (group *Group) SetBSON(raw bson.Raw) error {

	tmp := struct {
		Access int `json:"access" bson:"access"`

		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		ContextsIDs []string `json:"contexts_ids" bson:"contexts_ids"`

		GranteesIDs []string `json:"grantees_ids" bson:"grantees_ids"`

		OwnerID string `json:"owner_id" bson:"owner_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	group.Access = tmp.Access

	group.CreatedAt = tmp.CreatedAt

	group.DeletedAt = tmp.DeletedAt

	group.Id = tmp.Id.Hex()

	group.Name = tmp.Name

	group.UpdatedAt = tmp.UpdatedAt

	group.ContextsIDs = tmp.ContextsIDs

	group.GranteesIDs = tmp.GranteesIDs

	group.OwnerID = tmp.OwnerID

	return nil

}

// BSON }}}
