package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Task struct {
	CreatedAt           *time.Time `json:"created_at" bson:"created_at"`
	EndTime             *time.Time `json:"end_time" bson:"end_time"`
	Id                  string     `json:"id" bson:"_id,omitempty"`
	Name                string     `json:"name" bson:"name"`
	StartTime           *time.Time `json:"start_time" bson:"start_time"`
	TaskDependenciesIDs []string   `json:"task_dependencies_ids" bson:"task_dependencies_ids"`
	UpdatedAt           *time.Time `json:"updated_at" bson:"updated_at"`
	UserID              string     `json:"user_id" bson:"user_id"`
}

func NewTask() *Task {
	return &Task{}
}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (task *Task) Kind() data.Kind {
	return TaskKind
}

// just returns itself for now
func (task *Task) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = task.ID()
	return foo
}

func (task *Task) SetID(id data.ID) {
	task.Id = id.String()
}

func (task *Task) ID() data.ID {
	return data.ID(task.Id)
}

func (task *Task) IncludeTaskDependency(taskDependency *Task) {
	task.TaskDependenciesIDs = append(task.TaskDependenciesIDs, taskDependency.ID().String())
}

func (task *Task) ExcludeTaskDependency(taskDependency *Task) {
	tmp := make([]string, 0)
	id := taskDependency.ID().String()
	for _, s := range task.TaskDependenciesIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	task.TaskDependenciesIDs = tmp
}

func (task *Task) TaskDependenciesIter(store data.Store) (data.ModelIterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(task.TaskDependenciesIDs), store), nil
}

func (task *Task) TaskDependencies(store data.Store) ([]*Task, error) {

	task_dependencies := make([]*Task, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(task.TaskDependenciesIDs), store)
	task_dependency := NewTask()
	for iter.Next(task_dependency) {
		task_dependencies = append(task_dependencies, task_dependency)
		task_dependency = NewTask()
	}
	return task_dependencies, nil
}

func (task *Task) SetUser(user *User) error {
	task.UserID = user.ID().String()
	return nil
}

func (task *Task) User(store data.Store) (*User, error) {
	if task.UserID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(task.UserID)
	user.SetID(data.ID(pid.Hex()))
	return user, store.PopulateByID(user)

}

func (task *Task) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt *time.Time `json:"created_at" bson:"created_at"`

		EndTime *time.Time `json:"end_time" bson:"end_time"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		StartTime *time.Time `json:"start_time" bson:"start_time"`

		UpdatedAt *time.Time `json:"updated_at" bson:"updated_at"`

		TaskDependenciesIDs []string `json:"task_dependencies_ids" bson:"task_dependencies_ids"`

		UserID string `json:"user_id" bson:"user_id"`
	}{

		CreatedAt: task.CreatedAt,

		EndTime: task.EndTime,

		Name: task.Name,

		StartTime: task.StartTime,

		UpdatedAt: task.UpdatedAt,

		TaskDependenciesIDs: task.TaskDependenciesIDs,

		UserID: task.UserID,
	}, nil

}

func (task *Task) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt *time.Time `json:"created_at" bson:"created_at"`

		EndTime *time.Time `json:"end_time" bson:"end_time"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		StartTime *time.Time `json:"start_time" bson:"start_time"`

		UpdatedAt *time.Time `json:"updated_at" bson:"updated_at"`

		TaskDependenciesIDs []string `json:"task_dependencies_ids" bson:"task_dependencies_ids"`

		UserID string `json:"user_id" bson:"user_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	task.CreatedAt = tmp.CreatedAt

	task.EndTime = tmp.EndTime

	task.Id = tmp.Id.Hex()

	task.Name = tmp.Name

	task.StartTime = tmp.StartTime

	task.UpdatedAt = tmp.UpdatedAt

	task.TaskDependenciesIDs = tmp.TaskDependenciesIDs

	task.UserID = tmp.UserID

	return nil

}
