package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"github.com/elos/metis"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Task struct {
	CreatedAt           time.Time `json:"created_at" bson:"created_at"`
	EndTime             time.Time `json:"end_time" bson:"end_time"`
	Id                  string    `json:"id" bson:"_id,omitempty"`
	Name                string    `json:"name" bson:"name"`
	OwnerId             string    `json:"owner_id" bson:"owner_id"`
	PersonId            string    `json:"person_id" bson:"person_id"`
	StartTime           time.Time `json:"start_time" bson:"start_time"`
	TaskDependenciesIds []string  `json:"task_dependencies_ids" bson:"task_dependencies_ids"`
	UpdatedAt           time.Time `json:"updated_at" bson:"updated_at"`
}

func NewTask() *Task {
	return &Task{}
}

func FindTask(db data.DB, id data.ID) (*Task, error) {

	task := NewTask()
	task.SetID(id)

	return task, db.PopulateByID(task)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (task *Task) Kind() data.Kind {
	return TaskKind
}

// just returns itself for now
func (task *Task) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = task.ID()
	return foo
}

func (task *Task) SetID(id data.ID) {
	task.Id = id.String()
}

func (task *Task) ID() data.ID {
	return data.ID(task.Id)
}

func (task *Task) SetOwner(userArgument *User) error {
	task.OwnerId = userArgument.ID().String()
	return nil
}

func (task *Task) Owner(db data.DB) (*User, error) {
	if task.OwnerId == "" {
		return nil, ErrEmptyLink
	}

	userArgument := NewUser()
	pid, _ := mongo.ParseObjectID(task.OwnerId)
	userArgument.SetID(data.ID(pid.Hex()))
	return userArgument, db.PopulateByID(userArgument)

}

func (task *Task) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := task.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := task.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(task); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

func (task *Task) SetPerson(personArgument *Person) error {
	task.PersonId = personArgument.ID().String()
	return nil
}

func (task *Task) Person(db data.DB) (*Person, error) {
	if task.PersonId == "" {
		return nil, ErrEmptyLink
	}

	personArgument := NewPerson()
	pid, _ := mongo.ParseObjectID(task.PersonId)
	personArgument.SetID(data.ID(pid.Hex()))
	return personArgument, db.PopulateByID(personArgument)

}

func (task *Task) PersonOrCreate(db data.DB) (*Person, error) {
	person, err := task.Person(db)

	if err == ErrEmptyLink {
		person := NewPerson()
		person.SetID(db.NewID())
		if err := task.SetPerson(person); err != nil {
			return nil, err
		}

		if err := db.Save(person); err != nil {
			return nil, err
		}

		if err := db.Save(task); err != nil {
			return nil, err
		}

		return person, nil
	} else {
		return person, err
	}
}

func (task *Task) IncludeTaskDependency(taskDependency *Task) {
	task.TaskDependenciesIds = append(task.TaskDependenciesIds, taskDependency.ID().String())
}

func (task *Task) ExcludeTaskDependency(taskDependency *Task) {
	tmp := make([]string, 0)
	id := taskDependency.ID().String()
	for _, s := range task.TaskDependenciesIds {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	task.TaskDependenciesIds = tmp
}

func (task *Task) TaskDependenciesIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(task.TaskDependenciesIds), db), nil
}

func (task *Task) TaskDependencies(db data.DB) ([]*Task, error) {

	task_dependencies := make([]*Task, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(task.TaskDependenciesIds), db)
	task_dependency := NewTask()
	for iter.Next(task_dependency) {
		task_dependencies = append(task_dependencies, task_dependency)
		task_dependency = NewTask()
	}
	return task_dependencies, nil
}

// BSON {{{
func (task *Task) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		EndTime time.Time `json:"end_time" bson:"end_time"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		StartTime time.Time `json:"start_time" bson:"start_time"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		OwnerId string `json:"owner_id" bson:"owner_id"`

		PersonId string `json:"person_id" bson:"person_id"`

		TaskDependenciesIds []string `json:"task_dependencies_ids" bson:"task_dependencies_ids"`
	}{

		CreatedAt: task.CreatedAt,

		EndTime: task.EndTime,

		Name: task.Name,

		StartTime: task.StartTime,

		UpdatedAt: task.UpdatedAt,

		OwnerId: task.OwnerId,

		PersonId: task.PersonId,

		TaskDependenciesIds: task.TaskDependenciesIds,
	}, nil

}

func (task *Task) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		EndTime time.Time `json:"end_time" bson:"end_time"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		StartTime time.Time `json:"start_time" bson:"start_time"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		OwnerId string `json:"owner_id" bson:"owner_id"`

		PersonId string `json:"person_id" bson:"person_id"`

		TaskDependenciesIds []string `json:"task_dependencies_ids" bson:"task_dependencies_ids"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	task.CreatedAt = tmp.CreatedAt

	task.EndTime = tmp.EndTime

	task.Id = tmp.Id.Hex()

	task.Name = tmp.Name

	task.StartTime = tmp.StartTime

	task.UpdatedAt = tmp.UpdatedAt

	task.OwnerId = tmp.OwnerId

	task.PersonId = tmp.PersonId

	task.TaskDependenciesIds = tmp.TaskDependenciesIds

	return nil

}

// BSON }}}

func (task *Task) FromStructure(structure map[string]interface{}) {

	if val, ok := structure["updated_at"]; ok {
		task.UpdatedAt = val.(time.Time)
	}

	if val, ok := structure["name"]; ok {
		task.Name = val.(string)
	}

	if val, ok := structure["start_time"]; ok {
		task.StartTime = val.(time.Time)
	}

	if val, ok := structure["end_time"]; ok {
		task.EndTime = val.(time.Time)
	}

	if val, ok := structure["id"]; ok {
		task.Id = val.(string)
	}

	if val, ok := structure["created_at"]; ok {
		task.CreatedAt = val.(time.Time)
	}

	if val, ok := structure["owner_id"]; ok {
		task.OwnerId = val.(string)
	}

	if val, ok := structure["person_id"]; ok {
		task.PersonId = val.(string)
	}

	if val, ok := structure["task_dependencies_ids"]; ok {
		task.TaskDependenciesIds = val.([]string)
	}

}

var TaskStructure = map[string]metis.Primitive{

	"created_at": 4,

	"updated_at": 4,

	"name": 3,

	"start_time": 4,

	"end_time": 4,

	"id": 9,

	"owner_id": 9,

	"person_id": 9,

	"task_dependencies_ids": 10,
}
