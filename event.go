package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Event struct {
	CreatedAt  time.Time `json:"created_at" bson:"created_at"`
	DeletedAt  time.Time `json:"deleted_at" bson:"deleted_at"`
	Id         string    `json:"id" bson:"_id,omitempty"`
	LocationID string    `json:"location_id" bson:"location_id"`
	MediaID    string    `json:"media_id" bson:"media_id"`
	Name       string    `json:"name" bson:"name"`
	NoteID     string    `json:"note_id" bson:"note_id"`
	OwnerID    string    `json:"owner_id" bson:"owner_id"`
	PriorID    string    `json:"prior_id" bson:"prior_id"`
	QuantityID string    `json:"quantity_id" bson:"quantity_id"`
	TagsIDs    []string  `json:"tags_ids" bson:"tags_ids"`
	Time       time.Time `json:"time" bson:"time"`
	UpdatedAt  time.Time `json:"updated_at" bson:"updated_at"`
}

func NewEvent() *Event {
	return &Event{}
}

func FindEvent(db data.DB, id data.ID) (*Event, error) {

	event := NewEvent()
	event.SetID(id)

	return event, db.PopulateByID(event)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (event *Event) Kind() data.Kind {
	return EventKind
}

// just returns itself for now
func (event *Event) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = event.ID()
	return foo
}

func (event *Event) SetID(id data.ID) {
	event.Id = id.String()
}

func (event *Event) ID() data.ID {
	return data.ID(event.Id)
}

func (event *Event) SetLocation(locationArgument *Location) error {
	event.LocationID = locationArgument.ID().String()
	return nil
}

func (event *Event) Location(db data.DB) (*Location, error) {
	if event.LocationID == "" {
		return nil, ErrEmptyLink
	}

	locationArgument := NewLocation()
	pid, _ := mongo.ParseObjectID(event.LocationID)
	locationArgument.SetID(data.ID(pid.Hex()))
	return locationArgument, db.PopulateByID(locationArgument)

}

func (event *Event) LocationOrCreate(db data.DB) (*Location, error) {
	location, err := event.Location(db)

	if err == ErrEmptyLink {
		location := NewLocation()
		location.SetID(db.NewID())
		if err := event.SetLocation(location); err != nil {
			return nil, err
		}

		if err := db.Save(location); err != nil {
			return nil, err
		}

		if err := db.Save(event); err != nil {
			return nil, err
		}

		return location, nil
	} else {
		return location, err
	}
}

func (event *Event) SetMedia(mediaArgument *Media) error {
	event.MediaID = mediaArgument.ID().String()
	return nil
}

func (event *Event) Media(db data.DB) (*Media, error) {
	if event.MediaID == "" {
		return nil, ErrEmptyLink
	}

	mediaArgument := NewMedia()
	pid, _ := mongo.ParseObjectID(event.MediaID)
	mediaArgument.SetID(data.ID(pid.Hex()))
	return mediaArgument, db.PopulateByID(mediaArgument)

}

func (event *Event) MediaOrCreate(db data.DB) (*Media, error) {
	media, err := event.Media(db)

	if err == ErrEmptyLink {
		media := NewMedia()
		media.SetID(db.NewID())
		if err := event.SetMedia(media); err != nil {
			return nil, err
		}

		if err := db.Save(media); err != nil {
			return nil, err
		}

		if err := db.Save(event); err != nil {
			return nil, err
		}

		return media, nil
	} else {
		return media, err
	}
}

func (event *Event) SetNote(noteArgument *Note) error {
	event.NoteID = noteArgument.ID().String()
	return nil
}

func (event *Event) Note(db data.DB) (*Note, error) {
	if event.NoteID == "" {
		return nil, ErrEmptyLink
	}

	noteArgument := NewNote()
	pid, _ := mongo.ParseObjectID(event.NoteID)
	noteArgument.SetID(data.ID(pid.Hex()))
	return noteArgument, db.PopulateByID(noteArgument)

}

func (event *Event) NoteOrCreate(db data.DB) (*Note, error) {
	note, err := event.Note(db)

	if err == ErrEmptyLink {
		note := NewNote()
		note.SetID(db.NewID())
		if err := event.SetNote(note); err != nil {
			return nil, err
		}

		if err := db.Save(note); err != nil {
			return nil, err
		}

		if err := db.Save(event); err != nil {
			return nil, err
		}

		return note, nil
	} else {
		return note, err
	}
}

func (event *Event) SetOwner(userArgument *User) error {
	event.OwnerID = userArgument.ID().String()
	return nil
}

func (event *Event) Owner(db data.DB) (*User, error) {
	if event.OwnerID == "" {
		return nil, ErrEmptyLink
	}

	userArgument := NewUser()
	pid, _ := mongo.ParseObjectID(event.OwnerID)
	userArgument.SetID(data.ID(pid.Hex()))
	return userArgument, db.PopulateByID(userArgument)

}

func (event *Event) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := event.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := event.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(event); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

func (event *Event) SetPrior(eventArgument *Event) error {
	event.PriorID = eventArgument.ID().String()
	return nil
}

func (event *Event) Prior(db data.DB) (*Event, error) {
	if event.PriorID == "" {
		return nil, ErrEmptyLink
	}

	eventArgument := NewEvent()
	pid, _ := mongo.ParseObjectID(event.PriorID)
	eventArgument.SetID(data.ID(pid.Hex()))
	return eventArgument, db.PopulateByID(eventArgument)

}

func (event *Event) PriorOrCreate(db data.DB) (*Event, error) {
	event, err := event.Prior(db)

	if err == ErrEmptyLink {
		event := NewEvent()
		event.SetID(db.NewID())
		if err := event.SetPrior(event); err != nil {
			return nil, err
		}

		if err := db.Save(event); err != nil {
			return nil, err
		}

		if err := db.Save(event); err != nil {
			return nil, err
		}

		return event, nil
	} else {
		return event, err
	}
}

func (event *Event) SetQuantity(quantityArgument *Quantity) error {
	event.QuantityID = quantityArgument.ID().String()
	return nil
}

func (event *Event) Quantity(db data.DB) (*Quantity, error) {
	if event.QuantityID == "" {
		return nil, ErrEmptyLink
	}

	quantityArgument := NewQuantity()
	pid, _ := mongo.ParseObjectID(event.QuantityID)
	quantityArgument.SetID(data.ID(pid.Hex()))
	return quantityArgument, db.PopulateByID(quantityArgument)

}

func (event *Event) QuantityOrCreate(db data.DB) (*Quantity, error) {
	quantity, err := event.Quantity(db)

	if err == ErrEmptyLink {
		quantity := NewQuantity()
		quantity.SetID(db.NewID())
		if err := event.SetQuantity(quantity); err != nil {
			return nil, err
		}

		if err := db.Save(quantity); err != nil {
			return nil, err
		}

		if err := db.Save(event); err != nil {
			return nil, err
		}

		return quantity, nil
	} else {
		return quantity, err
	}
}

func (event *Event) IncludeTag(tag *Tag) {
	event.TagsIDs = append(event.TagsIDs, tag.ID().String())
}

func (event *Event) ExcludeTag(tag *Tag) {
	tmp := make([]string, 0)
	id := tag.ID().String()
	for _, s := range event.TagsIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	event.TagsIDs = tmp
}

func (event *Event) TagsIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(event.TagsIDs), db), nil
}

func (event *Event) Tags(db data.DB) ([]*Tag, error) {

	tags := make([]*Tag, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(event.TagsIDs), db)
	tag := NewTag()
	for iter.Next(tag) {
		tags = append(tags, tag)
		tag = NewTag()
	}
	return tags, nil
}

// BSON {{{
func (event *Event) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		Time time.Time `json:"time" bson:"time"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		LocationID string `json:"location_id" bson:"location_id"`

		MediaID string `json:"media_id" bson:"media_id"`

		NoteID string `json:"note_id" bson:"note_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		PriorID string `json:"prior_id" bson:"prior_id"`

		QuantityID string `json:"quantity_id" bson:"quantity_id"`

		TagsIDs []string `json:"tags_ids" bson:"tags_ids"`
	}{

		CreatedAt: event.CreatedAt,

		DeletedAt: event.DeletedAt,

		Name: event.Name,

		Time: event.Time,

		UpdatedAt: event.UpdatedAt,

		LocationID: event.LocationID,

		MediaID: event.MediaID,

		NoteID: event.NoteID,

		OwnerID: event.OwnerID,

		PriorID: event.PriorID,

		QuantityID: event.QuantityID,

		TagsIDs: event.TagsIDs,
	}, nil

}

func (event *Event) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		Time time.Time `json:"time" bson:"time"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		LocationID string `json:"location_id" bson:"location_id"`

		MediaID string `json:"media_id" bson:"media_id"`

		NoteID string `json:"note_id" bson:"note_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		PriorID string `json:"prior_id" bson:"prior_id"`

		QuantityID string `json:"quantity_id" bson:"quantity_id"`

		TagsIDs []string `json:"tags_ids" bson:"tags_ids"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	event.CreatedAt = tmp.CreatedAt

	event.DeletedAt = tmp.DeletedAt

	event.Id = tmp.Id.Hex()

	event.Name = tmp.Name

	event.Time = tmp.Time

	event.UpdatedAt = tmp.UpdatedAt

	event.LocationID = tmp.LocationID

	event.MediaID = tmp.MediaID

	event.NoteID = tmp.NoteID

	event.OwnerID = tmp.OwnerID

	event.PriorID = tmp.PriorID

	event.QuantityID = tmp.QuantityID

	event.TagsIDs = tmp.TagsIDs

	return nil

}

// BSON }}}
