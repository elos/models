package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Event struct {
	CreatedAt time.Time `json:"created_at" bson:"created_at"`
	EndTime   time.Time `json:"end_time" bson:"end_time"`
	Id        string    `json:"id" bson:"_id,omitempty"`
	Name      string    `json:"name" bson:"name"`
	OwnerID   string    `json:"owner_id" bson:"owner_id"`
	PersonID  string    `json:"person_id" bson:"person_id"`
	StartTime time.Time `json:"start_time" bson:"start_time"`
	Tags      []string  `json:"tags" bson:"tags"`
	UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`
}

func NewEvent() *Event {
	return &Event{}
}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (event *Event) Kind() data.Kind {
	return EventKind
}

// just returns itself for now
func (event *Event) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = event.ID()
	return foo
}

func (event *Event) SetID(id data.ID) {
	event.Id = id.String()
}

func (event *Event) ID() data.ID {
	return data.ID(event.Id)
}

func (event *Event) SetOwner(user *User) error {
	event.OwnerID = user.ID().String()
	return nil
}

func (event *Event) Owner(db data.DB) (*User, error) {
	if event.OwnerID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(event.OwnerID)
	user.SetID(data.ID(pid.Hex()))
	return user, db.PopulateByID(user)

}

func (event *Event) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := event.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := event.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(event); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

func (event *Event) SetPerson(person *Person) error {
	event.PersonID = person.ID().String()
	return nil
}

func (event *Event) Person(db data.DB) (*Person, error) {
	if event.PersonID == "" {
		return nil, ErrEmptyLink
	}

	person := NewPerson()
	pid, _ := mongo.ParseObjectID(event.PersonID)
	person.SetID(data.ID(pid.Hex()))
	return person, db.PopulateByID(person)

}

func (event *Event) PersonOrCreate(db data.DB) (*Person, error) {
	person, err := event.Person(db)

	if err == ErrEmptyLink {
		person := NewPerson()
		person.SetID(db.NewID())
		if err := event.SetPerson(person); err != nil {
			return nil, err
		}

		if err := db.Save(person); err != nil {
			return nil, err
		}

		if err := db.Save(event); err != nil {
			return nil, err
		}

		return person, nil
	} else {
		return person, err
	}
}

// BSON {{{
func (event *Event) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		EndTime time.Time `json:"end_time" bson:"end_time"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		StartTime time.Time `json:"start_time" bson:"start_time"`

		Tags []string `json:"tags" bson:"tags"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		PersonID string `json:"person_id" bson:"person_id"`
	}{

		CreatedAt: event.CreatedAt,

		EndTime: event.EndTime,

		Name: event.Name,

		StartTime: event.StartTime,

		Tags: event.Tags,

		UpdatedAt: event.UpdatedAt,

		OwnerID: event.OwnerID,

		PersonID: event.PersonID,
	}, nil

}

func (event *Event) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		EndTime time.Time `json:"end_time" bson:"end_time"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		StartTime time.Time `json:"start_time" bson:"start_time"`

		Tags []string `json:"tags" bson:"tags"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		PersonID string `json:"person_id" bson:"person_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	event.CreatedAt = tmp.CreatedAt

	event.EndTime = tmp.EndTime

	event.Id = tmp.Id.Hex()

	event.Name = tmp.Name

	event.StartTime = tmp.StartTime

	event.Tags = tmp.Tags

	event.UpdatedAt = tmp.UpdatedAt

	event.OwnerID = tmp.OwnerID

	event.PersonID = tmp.PersonID

	return nil

}

// BSON }}}
