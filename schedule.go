package models

// THIS FILE GENERATED BY METIS

import (
	"time"

	"github.com/elos/d"
	"github.com/elos/d/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// this type def generated by metis
type Schedule struct {
	CreatedAt   *time.Time `json:"created_at" bson:"created_at"`
	EndTime     *time.Time `json:"end_time" bson:"end_time"`
	FixturesIDs []string   `json:"fixtures_ids" bson:"fixtures_ids"`
	Id          string     `json:"id" bson:"_id,omitempty"`
	Name        string     `json:"name" bson:"name"`
	StartTime   *time.Time `json:"start_time" bson:"start_time"`
	UpdatedAt   *time.Time `json:"updated_at" bson:"updated_at"`
	UserID      string     `json:"user_id" bson:"user_id"`
}

func NewSchedule() *Schedule {
	return &Schedule{}
}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (schedule *Schedule) Kind() d.Kind {
	return ScheduleKind
}

// just returns itself for now
func (schedule *Schedule) Concerned() []d.ID {
	foo := make([]d.ID, 1)
	foo[0] = schedule.ID()
	return foo
}

func (schedule *Schedule) SetID(id d.ID) {
	schedule.Id = id.String()
}

func (schedule *Schedule) ID() d.ID {
	return d.ID(schedule.Id)
}

func (schedule *Schedule) IncludeFixture(fixture *Fixture) {
	schedule.FixturesIDs = append(schedule.FixturesIDs, fixture.ID().String())
}

func (schedule *Schedule) ExcludeFixture(fixture *Fixture) {
	tmp := make([]string, 0)
	id := fixture.ID().String()
	for _, s := range schedule.FixturesIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	schedule.FixturesIDs = tmp
}

func (schedule *Schedule) FixturesIter(store d.Store) (d.ModelIterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(schedule.FixturesIDs), store), nil
}

func (schedule *Schedule) Fixtures(store d.Store) ([]*Fixture, error) {

	fixtures := make([]*Fixture, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(schedule.FixturesIDs), store)
	fixture := NewFixture()
	for iter.Next(fixture) {
		fixtures = append(fixtures, fixture)
		fixture = NewFixture()
	}
	return fixtures, nil
}

func (schedule *Schedule) SetUser(user *User) error {
	schedule.UserID = user.ID().String()
	return nil
}

func (schedule *Schedule) User(store d.Store) (*User, error) {
	if schedule.UserID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(schedule.UserID)
	user.SetID(d.ID(pid.Hex()))
	return user, store.PopulateByID(user)

}

func (schedule *Schedule) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt *time.Time `json:"created_at" bson:"created_at"`

		EndTime *time.Time `json:"end_time" bson:"end_time"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		StartTime *time.Time `json:"start_time" bson:"start_time"`

		UpdatedAt *time.Time `json:"updated_at" bson:"updated_at"`

		FixturesIDs []string `json:"fixtures_ids" bson:"fixtures_ids"`

		UserID string `json:"user_id" bson:"user_id"`
	}{

		CreatedAt: schedule.CreatedAt,

		EndTime: schedule.EndTime,

		Name: schedule.Name,

		StartTime: schedule.StartTime,

		UpdatedAt: schedule.UpdatedAt,

		FixturesIDs: schedule.FixturesIDs,

		UserID: schedule.UserID,
	}, nil

}

func (schedule *Schedule) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt *time.Time `json:"created_at" bson:"created_at"`

		EndTime *time.Time `json:"end_time" bson:"end_time"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		StartTime *time.Time `json:"start_time" bson:"start_time"`

		UpdatedAt *time.Time `json:"updated_at" bson:"updated_at"`

		FixturesIDs []string `json:"fixtures_ids" bson:"fixtures_ids"`

		UserID string `json:"user_id" bson:"user_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	schedule.CreatedAt = tmp.CreatedAt

	schedule.EndTime = tmp.EndTime

	schedule.Id = tmp.Id.Hex()

	schedule.Name = tmp.Name

	schedule.StartTime = tmp.StartTime

	schedule.UpdatedAt = tmp.UpdatedAt

	schedule.FixturesIDs = tmp.FixturesIDs

	schedule.UserID = tmp.UserID

	return nil

}
