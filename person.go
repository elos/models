package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"github.com/elos/metis"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Person struct {
	ActionsIds            []string  `json:"actions_ids" bson:"actions_ids"`
	CalendarId            string    `json:"calendar_id" bson:"calendar_id"`
	CreatedAt             time.Time `json:"created_at" bson:"created_at"`
	CurrentActionId       string    `json:"current_action_id" bson:"current_action_id"`
	CurrentActionableId   string    `json:"current_actionable_id" bson:"current_actionable_id"`
	CurrentActionableKind string    `json:"current_actionable_kind" bson:"current_actionable_kind"`
	DataIds               []string  `json:"data_ids" bson:"data_ids"`
	EventsIds             []string  `json:"events_ids" bson:"events_ids"`
	Id                    string    `json:"id" bson:"_id,omitempty"`
	Key                   string    `json:"key" bson:"key"`
	Name                  string    `json:"name" bson:"name"`
	OntologyId            string    `json:"ontology_id" bson:"ontology_id"`
	OwnerId               string    `json:"owner_id" bson:"owner_id"`
	Phone                 string    `json:"phone" bson:"phone"`
	PublicKeys            []string  `json:"public_keys" bson:"public_keys"`
	RoutinesIds           []string  `json:"routines_ids" bson:"routines_ids"`
	TasksIds              []string  `json:"tasks_ids" bson:"tasks_ids"`
	UpdatedAt             time.Time `json:"updated_at" bson:"updated_at"`
}

func NewPerson() *Person {
	return &Person{}
}

func FindPerson(db data.DB, id data.ID) (*Person, error) {

	person := NewPerson()
	person.SetID(id)

	return person, db.PopulateByID(person)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (person *Person) Kind() data.Kind {
	return PersonKind
}

// just returns itself for now
func (person *Person) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = person.ID()
	return foo
}

func (person *Person) SetID(id data.ID) {
	person.Id = id.String()
}

func (person *Person) ID() data.ID {
	return data.ID(person.Id)
}

func (person *Person) IncludeAction(action *Action) {
	otherID := action.ID().String()
	for i := range person.ActionsIds {
		if person.ActionsIds[i] == otherID {
			return
		}
	}
	person.ActionsIds = append(person.ActionsIds, otherID)
}

func (person *Person) ExcludeAction(action *Action) {
	tmp := make([]string, 0)
	id := action.ID().String()
	for _, s := range person.ActionsIds {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	person.ActionsIds = tmp
}

func (person *Person) ActionsIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(person.ActionsIds), db), nil
}

func (person *Person) Actions(db data.DB) (actions []*Action, err error) {
	actions = make([]*Action, len(person.ActionsIds))
	action := NewAction()
	for i, id := range person.ActionsIds {
		action.Id = id
		if err = db.PopulateByID(action); err != nil {
			return
		}

		actions[i] = action
		action = NewAction()
	}

	return
}

func (person *Person) SetCalendar(calendarArgument *Calendar) error {
	person.CalendarId = calendarArgument.ID().String()
	return nil
}

func (person *Person) Calendar(db data.DB) (*Calendar, error) {
	if person.CalendarId == "" {
		return nil, ErrEmptyLink
	}

	calendarArgument := NewCalendar()
	id, _ := db.ParseID(person.CalendarId)
	calendarArgument.SetID(id)
	return calendarArgument, db.PopulateByID(calendarArgument)

}

func (person *Person) CalendarOrCreate(db data.DB) (*Calendar, error) {
	calendar, err := person.Calendar(db)

	if err == ErrEmptyLink {
		calendar := NewCalendar()
		calendar.SetID(db.NewID())
		if err := person.SetCalendar(calendar); err != nil {
			return nil, err
		}

		if err := db.Save(calendar); err != nil {
			return nil, err
		}

		if err := db.Save(person); err != nil {
			return nil, err
		}

		return calendar, nil
	} else {
		return calendar, err
	}
}

func (person *Person) SetCurrentAction(actionArgument *Action) error {
	person.CurrentActionId = actionArgument.ID().String()
	return nil
}

func (person *Person) CurrentAction(db data.DB) (*Action, error) {
	if person.CurrentActionId == "" {
		return nil, ErrEmptyLink
	}

	actionArgument := NewAction()
	id, _ := db.ParseID(person.CurrentActionId)
	actionArgument.SetID(id)
	return actionArgument, db.PopulateByID(actionArgument)

}

func (person *Person) CurrentActionOrCreate(db data.DB) (*Action, error) {
	action, err := person.CurrentAction(db)

	if err == ErrEmptyLink {
		action := NewAction()
		action.SetID(db.NewID())
		if err := person.SetCurrentAction(action); err != nil {
			return nil, err
		}

		if err := db.Save(action); err != nil {
			return nil, err
		}

		if err := db.Save(person); err != nil {
			return nil, err
		}

		return action, nil
	} else {
		return action, err
	}
}

func (person *Person) SetCurrentActionable(actionableArgument Actionable) error {
	person.CurrentActionableId = actionableArgument.ID().String()
	return nil
}

func (person *Person) CurrentActionable(db data.DB) (Actionable, error) {
	if person.CurrentActionableId == "" {
		return nil, ErrEmptyLink
	}

	m := ModelFor(data.Kind(person.CurrentActionableKind))
	actionable := m.(Actionable)

	id, _ := db.ParseID(person.CurrentActionableId)

	actionable.SetID(id)
	return actionable, db.PopulateByID(actionable)

}

func (person *Person) IncludeDatum(datum *Datum) {
	otherID := datum.ID().String()
	for i := range person.DataIds {
		if person.DataIds[i] == otherID {
			return
		}
	}
	person.DataIds = append(person.DataIds, otherID)
}

func (person *Person) ExcludeDatum(datum *Datum) {
	tmp := make([]string, 0)
	id := datum.ID().String()
	for _, s := range person.DataIds {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	person.DataIds = tmp
}

func (person *Person) DataIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(person.DataIds), db), nil
}

func (person *Person) Data(db data.DB) (data []*Datum, err error) {
	data = make([]*Datum, len(person.DataIds))
	datum := NewDatum()
	for i, id := range person.DataIds {
		datum.Id = id
		if err = db.PopulateByID(datum); err != nil {
			return
		}

		data[i] = datum
		datum = NewDatum()
	}

	return
}

func (person *Person) IncludeEvent(event *Event) {
	otherID := event.ID().String()
	for i := range person.EventsIds {
		if person.EventsIds[i] == otherID {
			return
		}
	}
	person.EventsIds = append(person.EventsIds, otherID)
}

func (person *Person) ExcludeEvent(event *Event) {
	tmp := make([]string, 0)
	id := event.ID().String()
	for _, s := range person.EventsIds {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	person.EventsIds = tmp
}

func (person *Person) EventsIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(person.EventsIds), db), nil
}

func (person *Person) Events(db data.DB) (events []*Event, err error) {
	events = make([]*Event, len(person.EventsIds))
	event := NewEvent()
	for i, id := range person.EventsIds {
		event.Id = id
		if err = db.PopulateByID(event); err != nil {
			return
		}

		events[i] = event
		event = NewEvent()
	}

	return
}

func (person *Person) SetOntology(ontologyArgument *Ontology) error {
	person.OntologyId = ontologyArgument.ID().String()
	return nil
}

func (person *Person) Ontology(db data.DB) (*Ontology, error) {
	if person.OntologyId == "" {
		return nil, ErrEmptyLink
	}

	ontologyArgument := NewOntology()
	id, _ := db.ParseID(person.OntologyId)
	ontologyArgument.SetID(id)
	return ontologyArgument, db.PopulateByID(ontologyArgument)

}

func (person *Person) OntologyOrCreate(db data.DB) (*Ontology, error) {
	ontology, err := person.Ontology(db)

	if err == ErrEmptyLink {
		ontology := NewOntology()
		ontology.SetID(db.NewID())
		if err := person.SetOntology(ontology); err != nil {
			return nil, err
		}

		if err := db.Save(ontology); err != nil {
			return nil, err
		}

		if err := db.Save(person); err != nil {
			return nil, err
		}

		return ontology, nil
	} else {
		return ontology, err
	}
}

func (person *Person) SetOwner(userArgument *User) error {
	person.OwnerId = userArgument.ID().String()
	return nil
}

func (person *Person) Owner(db data.DB) (*User, error) {
	if person.OwnerId == "" {
		return nil, ErrEmptyLink
	}

	userArgument := NewUser()
	id, _ := db.ParseID(person.OwnerId)
	userArgument.SetID(id)
	return userArgument, db.PopulateByID(userArgument)

}

func (person *Person) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := person.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := person.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(person); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

func (person *Person) IncludeRoutine(routine *Routine) {
	otherID := routine.ID().String()
	for i := range person.RoutinesIds {
		if person.RoutinesIds[i] == otherID {
			return
		}
	}
	person.RoutinesIds = append(person.RoutinesIds, otherID)
}

func (person *Person) ExcludeRoutine(routine *Routine) {
	tmp := make([]string, 0)
	id := routine.ID().String()
	for _, s := range person.RoutinesIds {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	person.RoutinesIds = tmp
}

func (person *Person) RoutinesIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(person.RoutinesIds), db), nil
}

func (person *Person) Routines(db data.DB) (routines []*Routine, err error) {
	routines = make([]*Routine, len(person.RoutinesIds))
	routine := NewRoutine()
	for i, id := range person.RoutinesIds {
		routine.Id = id
		if err = db.PopulateByID(routine); err != nil {
			return
		}

		routines[i] = routine
		routine = NewRoutine()
	}

	return
}

func (person *Person) IncludeTask(task *Task) {
	otherID := task.ID().String()
	for i := range person.TasksIds {
		if person.TasksIds[i] == otherID {
			return
		}
	}
	person.TasksIds = append(person.TasksIds, otherID)
}

func (person *Person) ExcludeTask(task *Task) {
	tmp := make([]string, 0)
	id := task.ID().String()
	for _, s := range person.TasksIds {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	person.TasksIds = tmp
}

func (person *Person) TasksIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(person.TasksIds), db), nil
}

func (person *Person) Tasks(db data.DB) (tasks []*Task, err error) {
	tasks = make([]*Task, len(person.TasksIds))
	task := NewTask()
	for i, id := range person.TasksIds {
		task.Id = id
		if err = db.PopulateByID(task); err != nil {
			return
		}

		tasks[i] = task
		task = NewTask()
	}

	return
}

// BSON {{{
func (person *Person) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Key string `json:"key" bson:"key"`

		Name string `json:"name" bson:"name"`

		Phone string `json:"phone" bson:"phone"`

		PublicKeys []string `json:"public_keys" bson:"public_keys"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		ActionsIds []string `json:"actions_ids" bson:"actions_ids"`

		CalendarId string `json:"calendar_id" bson:"calendar_id"`

		CurrentActionId string `json:"current_action_id" bson:"current_action_id"`

		CurrentActionableId string `json:"current_actionable_id" bson:"current_actionable_id"`

		CurrentActionableKind string `json:"current_actionable_kind" bson:"current_actionable_kind"`

		DataIds []string `json:"data_ids" bson:"data_ids"`

		EventsIds []string `json:"events_ids" bson:"events_ids"`

		OntologyId string `json:"ontology_id" bson:"ontology_id"`

		OwnerId string `json:"owner_id" bson:"owner_id"`

		RoutinesIds []string `json:"routines_ids" bson:"routines_ids"`

		TasksIds []string `json:"tasks_ids" bson:"tasks_ids"`
	}{

		CreatedAt: person.CreatedAt,

		Key: person.Key,

		Name: person.Name,

		Phone: person.Phone,

		PublicKeys: person.PublicKeys,

		UpdatedAt: person.UpdatedAt,

		ActionsIds: person.ActionsIds,

		CalendarId: person.CalendarId,

		CurrentActionId: person.CurrentActionId,

		CurrentActionableId: person.CurrentActionableId,

		CurrentActionableKind: person.CurrentActionableKind,

		DataIds: person.DataIds,

		EventsIds: person.EventsIds,

		OntologyId: person.OntologyId,

		OwnerId: person.OwnerId,

		RoutinesIds: person.RoutinesIds,

		TasksIds: person.TasksIds,
	}, nil

}

func (person *Person) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Key string `json:"key" bson:"key"`

		Name string `json:"name" bson:"name"`

		Phone string `json:"phone" bson:"phone"`

		PublicKeys []string `json:"public_keys" bson:"public_keys"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		ActionsIds []string `json:"actions_ids" bson:"actions_ids"`

		CalendarId string `json:"calendar_id" bson:"calendar_id"`

		CurrentActionId string `json:"current_action_id" bson:"current_action_id"`

		CurrentActionableId string `json:"current_actionable_id" bson:"current_actionable_id"`

		CurrentActionableKind string `json:"current_actionable_kind" bson:"current_actionable_kind"`

		DataIds []string `json:"data_ids" bson:"data_ids"`

		EventsIds []string `json:"events_ids" bson:"events_ids"`

		OntologyId string `json:"ontology_id" bson:"ontology_id"`

		OwnerId string `json:"owner_id" bson:"owner_id"`

		RoutinesIds []string `json:"routines_ids" bson:"routines_ids"`

		TasksIds []string `json:"tasks_ids" bson:"tasks_ids"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	person.CreatedAt = tmp.CreatedAt

	person.Id = tmp.Id.Hex()

	person.Key = tmp.Key

	person.Name = tmp.Name

	person.Phone = tmp.Phone

	person.PublicKeys = tmp.PublicKeys

	person.UpdatedAt = tmp.UpdatedAt

	person.ActionsIds = tmp.ActionsIds

	person.CalendarId = tmp.CalendarId

	person.CurrentActionId = tmp.CurrentActionId

	person.CurrentActionableId = tmp.CurrentActionableId

	person.CurrentActionableKind = tmp.CurrentActionableKind

	person.DataIds = tmp.DataIds

	person.EventsIds = tmp.EventsIds

	person.OntologyId = tmp.OntologyId

	person.OwnerId = tmp.OwnerId

	person.RoutinesIds = tmp.RoutinesIds

	person.TasksIds = tmp.TasksIds

	return nil

}

// BSON }}}

func (person *Person) FromStructure(structure map[string]interface{}) {

	if val, ok := structure["public_keys"]; ok {
		person.PublicKeys = val.([]string)
	}

	if val, ok := structure["id"]; ok {
		person.Id = val.(string)
	}

	if val, ok := structure["created_at"]; ok {
		person.CreatedAt = val.(time.Time)
	}

	if val, ok := structure["updated_at"]; ok {
		person.UpdatedAt = val.(time.Time)
	}

	if val, ok := structure["name"]; ok {
		person.Name = val.(string)
	}

	if val, ok := structure["phone"]; ok {
		person.Phone = val.(string)
	}

	if val, ok := structure["key"]; ok {
		person.Key = val.(string)
	}

	if val, ok := structure["data_ids"]; ok {
		person.DataIds = val.([]string)
	}

	if val, ok := structure["events_ids"]; ok {
		person.EventsIds = val.([]string)
	}

	if val, ok := structure["current_action_id"]; ok {
		person.CurrentActionId = val.(string)
	}

	if val, ok := structure["calendar_id"]; ok {
		person.CalendarId = val.(string)
	}

	if val, ok := structure["owner_id"]; ok {
		person.OwnerId = val.(string)
	}

	if val, ok := structure["actions_ids"]; ok {
		person.ActionsIds = val.([]string)
	}

	if val, ok := structure["tasks_ids"]; ok {
		person.TasksIds = val.([]string)
	}

	if val, ok := structure["routines_ids"]; ok {
		person.RoutinesIds = val.([]string)
	}

	if val, ok := structure["ontology_id"]; ok {
		person.OntologyId = val.(string)
	}

	if val, ok := structure["current_actionable_id"]; ok {
		person.CurrentActionableId = val.(string)
	}

	if val, ok := structure["current_actionable_kind"]; ok {
		person.CurrentActionableKind = val.(string)
	}

}

var PersonStructure = map[string]metis.Primitive{

	"id": 9,

	"created_at": 4,

	"updated_at": 4,

	"name": 3,

	"phone": 3,

	"key": 3,

	"public_keys": 7,

	"data_ids": 10,

	"events_ids": 10,

	"current_action_id": 9,

	"owner_id": 9,

	"actions_ids": 10,

	"tasks_ids": 10,

	"routines_ids": 10,

	"ontology_id": 9,

	"current_actionable_id": 9,

	"current_actionable_kind": 3,

	"calendar_id": 9,
}
