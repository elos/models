package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"github.com/elos/metis"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Person struct {
	CreatedAt time.Time `json:"created_at" bson:"created_at"`
	FirstName string    `json:"first_name" bson:"first_name"`
	Id        string    `json:"id" bson:"_id,omitempty"`
	LastName  string    `json:"last_name" bson:"last_name"`
	Name      string    `json:"name" bson:"name"`
	NotesIds  []string  `json:"notes_ids" bson:"notes_ids"`
	OwnerId   string    `json:"owner_id" bson:"owner_id"`
	UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`
}

func NewPerson() *Person {
	return &Person{}
}

func FindPerson(db data.DB, id data.ID) (*Person, error) {

	person := NewPerson()
	person.SetID(id)

	return person, db.PopulateByID(person)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (person *Person) Kind() data.Kind {
	return PersonKind
}

// just returns itself for now
func (person *Person) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = person.ID()
	return foo
}

func (person *Person) SetID(id data.ID) {
	person.Id = id.String()
}

func (person *Person) ID() data.ID {
	return data.ID(person.Id)
}

func (person *Person) IncludeNote(note *Note) {
	otherID := note.ID().String()
	for i := range person.NotesIds {
		if person.NotesIds[i] == otherID {
			return
		}
	}
	person.NotesIds = append(person.NotesIds, otherID)
}

func (person *Person) ExcludeNote(note *Note) {
	tmp := make([]string, 0)
	id := note.ID().String()
	for _, s := range person.NotesIds {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	person.NotesIds = tmp
}

func (person *Person) NotesIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(person.NotesIds), db), nil
}

func (person *Person) Notes(db data.DB) (notes []*Note, err error) {
	notes = make([]*Note, len(person.NotesIds))
	note := NewNote()
	for i, id := range person.NotesIds {
		note.Id = id
		if err = db.PopulateByID(note); err != nil {
			return
		}

		notes[i] = note
		note = NewNote()
	}

	return
}

func (person *Person) SetOwner(userArgument *User) error {
	person.OwnerId = userArgument.ID().String()
	return nil
}

func (person *Person) Owner(db data.DB) (*User, error) {
	if person.OwnerId == "" {
		return nil, ErrEmptyLink
	}

	userArgument := NewUser()
	id, _ := db.ParseID(person.OwnerId)
	userArgument.SetID(id)
	return userArgument, db.PopulateByID(userArgument)

}

func (person *Person) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := person.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := person.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(person); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

// BSON {{{
func (person *Person) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		FirstName string `json:"first_name" bson:"first_name"`

		Id string `json:"id" bson:"_id,omitempty"`

		LastName string `json:"last_name" bson:"last_name"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		NotesIds []string `json:"notes_ids" bson:"notes_ids"`

		OwnerId string `json:"owner_id" bson:"owner_id"`
	}{

		CreatedAt: person.CreatedAt,

		FirstName: person.FirstName,

		LastName: person.LastName,

		Name: person.Name,

		UpdatedAt: person.UpdatedAt,

		NotesIds: person.NotesIds,

		OwnerId: person.OwnerId,
	}, nil

}

func (person *Person) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		FirstName string `json:"first_name" bson:"first_name"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		LastName string `json:"last_name" bson:"last_name"`

		Name string `json:"name" bson:"name"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		NotesIds []string `json:"notes_ids" bson:"notes_ids"`

		OwnerId string `json:"owner_id" bson:"owner_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	person.CreatedAt = tmp.CreatedAt

	person.FirstName = tmp.FirstName

	person.Id = tmp.Id.Hex()

	person.LastName = tmp.LastName

	person.Name = tmp.Name

	person.UpdatedAt = tmp.UpdatedAt

	person.NotesIds = tmp.NotesIds

	person.OwnerId = tmp.OwnerId

	return nil

}

// BSON }}}

func (person *Person) FromStructure(structure map[string]interface{}) {

	if val, ok := structure["name"]; ok {
		person.Name = val.(string)
	}

	if val, ok := structure["id"]; ok {
		person.Id = val.(string)
	}

	if val, ok := structure["created_at"]; ok {
		person.CreatedAt = val.(time.Time)
	}

	if val, ok := structure["updated_at"]; ok {
		person.UpdatedAt = val.(time.Time)
	}

	if val, ok := structure["first_name"]; ok {
		person.FirstName = val.(string)
	}

	if val, ok := structure["last_name"]; ok {
		person.LastName = val.(string)
	}

	if val, ok := structure["owner_id"]; ok {
		person.OwnerId = val.(string)
	}

	if val, ok := structure["notes_ids"]; ok {
		person.NotesIds = val.([]string)
	}

}

var PersonStructure = map[string]metis.Primitive{

	"first_name": 3,

	"last_name": 3,

	"name": 3,

	"id": 9,

	"created_at": 4,

	"updated_at": 4,

	"notes_ids": 10,

	"owner_id": 9,
}
