package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Datum struct {
	Context   string    `json:"context" bson:"context"`
	CreatedAt time.Time `json:"created_at" bson:"created_at"`
	EventID   string    `json:"event_id" bson:"event_id"`
	Id        string    `json:"id" bson:"_id,omitempty"`
	OwnerID   string    `json:"owner_id" bson:"owner_id"`
	PersonID  string    `json:"person_id" bson:"person_id"`
	Tags      []string  `json:"tags" bson:"tags"`
	Unit      string    `json:"unit" bson:"unit"`
	Value     float64   `json:"value" bson:"value"`
}

func NewDatum() *Datum {
	return &Datum{}
}

func FindDatum(db data.DB, id data.ID) (*Datum, error) {

	datum := NewDatum()
	datum.SetID(id)

	return datum, db.PopulateByID(datum)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (datum *Datum) Kind() data.Kind {
	return DatumKind
}

// just returns itself for now
func (datum *Datum) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = datum.ID()
	return foo
}

func (datum *Datum) SetID(id data.ID) {
	datum.Id = id.String()
}

func (datum *Datum) ID() data.ID {
	return data.ID(datum.Id)
}

func (datum *Datum) SetEvent(event *Event) error {
	datum.EventID = event.ID().String()
	return nil
}

func (datum *Datum) Event(db data.DB) (*Event, error) {
	if datum.EventID == "" {
		return nil, ErrEmptyLink
	}

	event := NewEvent()
	pid, _ := mongo.ParseObjectID(datum.EventID)
	event.SetID(data.ID(pid.Hex()))
	return event, db.PopulateByID(event)

}

func (datum *Datum) EventOrCreate(db data.DB) (*Event, error) {
	event, err := datum.Event(db)

	if err == ErrEmptyLink {
		event := NewEvent()
		event.SetID(db.NewID())
		if err := datum.SetEvent(event); err != nil {
			return nil, err
		}

		if err := db.Save(event); err != nil {
			return nil, err
		}

		if err := db.Save(datum); err != nil {
			return nil, err
		}

		return event, nil
	} else {
		return event, err
	}
}

func (datum *Datum) SetOwner(user *User) error {
	datum.OwnerID = user.ID().String()
	return nil
}

func (datum *Datum) Owner(db data.DB) (*User, error) {
	if datum.OwnerID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(datum.OwnerID)
	user.SetID(data.ID(pid.Hex()))
	return user, db.PopulateByID(user)

}

func (datum *Datum) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := datum.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := datum.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(datum); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

func (datum *Datum) SetPerson(person *Person) error {
	datum.PersonID = person.ID().String()
	return nil
}

func (datum *Datum) Person(db data.DB) (*Person, error) {
	if datum.PersonID == "" {
		return nil, ErrEmptyLink
	}

	person := NewPerson()
	pid, _ := mongo.ParseObjectID(datum.PersonID)
	person.SetID(data.ID(pid.Hex()))
	return person, db.PopulateByID(person)

}

func (datum *Datum) PersonOrCreate(db data.DB) (*Person, error) {
	person, err := datum.Person(db)

	if err == ErrEmptyLink {
		person := NewPerson()
		person.SetID(db.NewID())
		if err := datum.SetPerson(person); err != nil {
			return nil, err
		}

		if err := db.Save(person); err != nil {
			return nil, err
		}

		if err := db.Save(datum); err != nil {
			return nil, err
		}

		return person, nil
	} else {
		return person, err
	}
}

// BSON {{{
func (datum *Datum) GetBSON() (interface{}, error) {

	return struct {
		Context string `json:"context" bson:"context"`

		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Tags []string `json:"tags" bson:"tags"`

		Unit string `json:"unit" bson:"unit"`

		Value float64 `json:"value" bson:"value"`

		EventID string `json:"event_id" bson:"event_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		PersonID string `json:"person_id" bson:"person_id"`
	}{

		Context: datum.Context,

		CreatedAt: datum.CreatedAt,

		Tags: datum.Tags,

		Unit: datum.Unit,

		Value: datum.Value,

		EventID: datum.EventID,

		OwnerID: datum.OwnerID,

		PersonID: datum.PersonID,
	}, nil

}

func (datum *Datum) SetBSON(raw bson.Raw) error {

	tmp := struct {
		Context string `json:"context" bson:"context"`

		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Tags []string `json:"tags" bson:"tags"`

		Unit string `json:"unit" bson:"unit"`

		Value float64 `json:"value" bson:"value"`

		EventID string `json:"event_id" bson:"event_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`

		PersonID string `json:"person_id" bson:"person_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	datum.Context = tmp.Context

	datum.CreatedAt = tmp.CreatedAt

	datum.Id = tmp.Id.Hex()

	datum.Tags = tmp.Tags

	datum.Unit = tmp.Unit

	datum.Value = tmp.Value

	datum.EventID = tmp.EventID

	datum.OwnerID = tmp.OwnerID

	datum.PersonID = tmp.PersonID

	return nil

}

// BSON }}}
