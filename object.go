package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Object struct {
	AttributesIDs []string  `json:"attributes_ids" bson:"attributes_ids"`
	CreatedAt     time.Time `json:"created_at" bson:"created_at"`
	DeletedAt     time.Time `json:"deleted_at" bson:"deleted_at"`
	Id            string    `json:"id" bson:"_id,omitempty"`
	LinksIDs      []string  `json:"links_ids" bson:"links_ids"`
	ModelID       string    `json:"model_id" bson:"model_id"`
	OntologyID    string    `json:"ontology_id" bson:"ontology_id"`
	OwnerID       string    `json:"owner_id" bson:"owner_id"`
	UpdatedAt     time.Time `json:"updated_at" bson:"updated_at"`
}

func NewObject() *Object {
	return &Object{}
}

func FindObject(db data.DB, id data.ID) (*Object, error) {

	object := NewObject()
	object.SetID(id)

	return object, db.PopulateByID(object)

}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (object *Object) Kind() data.Kind {
	return ObjectKind
}

// just returns itself for now
func (object *Object) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = object.ID()
	return foo
}

func (object *Object) SetID(id data.ID) {
	object.Id = id.String()
}

func (object *Object) ID() data.ID {
	return data.ID(object.Id)
}

func (object *Object) IncludeAttribute(attribute *Attribute) {
	object.AttributesIDs = append(object.AttributesIDs, attribute.ID().String())
}

func (object *Object) ExcludeAttribute(attribute *Attribute) {
	tmp := make([]string, 0)
	id := attribute.ID().String()
	for _, s := range object.AttributesIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	object.AttributesIDs = tmp
}

func (object *Object) AttributesIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(object.AttributesIDs), db), nil
}

func (object *Object) Attributes(db data.DB) ([]*Attribute, error) {

	attributes := make([]*Attribute, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(object.AttributesIDs), db)
	attribute := NewAttribute()
	for iter.Next(attribute) {
		attributes = append(attributes, attribute)
		attribute = NewAttribute()
	}
	return attributes, nil
}

func (object *Object) IncludeLink(link *Link) {
	object.LinksIDs = append(object.LinksIDs, link.ID().String())
}

func (object *Object) ExcludeLink(link *Link) {
	tmp := make([]string, 0)
	id := link.ID().String()
	for _, s := range object.LinksIDs {
		if s != id {
			tmp = append(tmp, s)
		}
	}
	object.LinksIDs = tmp
}

func (object *Object) LinksIter(db data.DB) (data.Iterator, error) {
	// not yet completely general
	return mongo.NewIDIter(mongo.NewIDSetFromStrings(object.LinksIDs), db), nil
}

func (object *Object) Links(db data.DB) ([]*Link, error) {

	links := make([]*Link, 0)
	iter := mongo.NewIDIter(mongo.NewIDSetFromStrings(object.LinksIDs), db)
	link := NewLink()
	for iter.Next(link) {
		links = append(links, link)
		link = NewLink()
	}
	return links, nil
}

func (object *Object) SetModel(model *Model) error {
	object.ModelID = model.ID().String()
	return nil
}

func (object *Object) Model(db data.DB) (*Model, error) {
	if object.ModelID == "" {
		return nil, ErrEmptyLink
	}

	model := NewModel()
	pid, _ := mongo.ParseObjectID(object.ModelID)
	model.SetID(data.ID(pid.Hex()))
	return model, db.PopulateByID(model)

}

func (object *Object) ModelOrCreate(db data.DB) (*Model, error) {
	model, err := object.Model(db)

	if err == ErrEmptyLink {
		model := NewModel()
		model.SetID(db.NewID())
		if err := object.SetModel(model); err != nil {
			return nil, err
		}

		if err := db.Save(model); err != nil {
			return nil, err
		}

		if err := db.Save(object); err != nil {
			return nil, err
		}

		return model, nil
	} else {
		return model, err
	}
}

func (object *Object) SetOntology(ontology *Ontology) error {
	object.OntologyID = ontology.ID().String()
	return nil
}

func (object *Object) Ontology(db data.DB) (*Ontology, error) {
	if object.OntologyID == "" {
		return nil, ErrEmptyLink
	}

	ontology := NewOntology()
	pid, _ := mongo.ParseObjectID(object.OntologyID)
	ontology.SetID(data.ID(pid.Hex()))
	return ontology, db.PopulateByID(ontology)

}

func (object *Object) OntologyOrCreate(db data.DB) (*Ontology, error) {
	ontology, err := object.Ontology(db)

	if err == ErrEmptyLink {
		ontology := NewOntology()
		ontology.SetID(db.NewID())
		if err := object.SetOntology(ontology); err != nil {
			return nil, err
		}

		if err := db.Save(ontology); err != nil {
			return nil, err
		}

		if err := db.Save(object); err != nil {
			return nil, err
		}

		return ontology, nil
	} else {
		return ontology, err
	}
}

func (object *Object) SetOwner(user *User) error {
	object.OwnerID = user.ID().String()
	return nil
}

func (object *Object) Owner(db data.DB) (*User, error) {
	if object.OwnerID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(object.OwnerID)
	user.SetID(data.ID(pid.Hex()))
	return user, db.PopulateByID(user)

}

func (object *Object) OwnerOrCreate(db data.DB) (*User, error) {
	user, err := object.Owner(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := object.SetOwner(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(object); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

// BSON {{{
func (object *Object) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		AttributesIDs []string `json:"attributes_ids" bson:"attributes_ids"`

		LinksIDs []string `json:"links_ids" bson:"links_ids"`

		ModelID string `json:"model_id" bson:"model_id"`

		OntologyID string `json:"ontology_id" bson:"ontology_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`
	}{

		CreatedAt: object.CreatedAt,

		DeletedAt: object.DeletedAt,

		UpdatedAt: object.UpdatedAt,

		AttributesIDs: object.AttributesIDs,

		LinksIDs: object.LinksIDs,

		ModelID: object.ModelID,

		OntologyID: object.OntologyID,

		OwnerID: object.OwnerID,
	}, nil

}

func (object *Object) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		DeletedAt time.Time `json:"deleted_at" bson:"deleted_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`

		AttributesIDs []string `json:"attributes_ids" bson:"attributes_ids"`

		LinksIDs []string `json:"links_ids" bson:"links_ids"`

		ModelID string `json:"model_id" bson:"model_id"`

		OntologyID string `json:"ontology_id" bson:"ontology_id"`

		OwnerID string `json:"owner_id" bson:"owner_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	object.CreatedAt = tmp.CreatedAt

	object.DeletedAt = tmp.DeletedAt

	object.Id = tmp.Id.Hex()

	object.UpdatedAt = tmp.UpdatedAt

	object.AttributesIDs = tmp.AttributesIDs

	object.LinksIDs = tmp.LinksIDs

	object.ModelID = tmp.ModelID

	object.OntologyID = tmp.OntologyID

	object.OwnerID = tmp.OwnerID

	return nil

}

// BSON }}}
