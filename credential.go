package models

import (
	"time"

	"github.com/elos/data"
	"github.com/elos/data/builtin/mongo"
	"gopkg.in/mgo.v2/bson"
)

// THIS FILE GENERATED BY METIS

// this type def generated by metis
type Credential struct {
	CreatedAt time.Time `json:"created_at" bson:"created_at"`
	Id        string    `json:"id" bson:"_id,omitempty"`
	Name      string    `json:"name" bson:"name"`
	Private   string    `json:"private" bson:"private"`
	Public    string    `json:"public" bson:"public"`
	Spec      string    `json:"spec" bson:"spec"`
	UserID    string    `json:"user_id" bson:"user_id"`
}

func NewCredential() *Credential {
	return &Credential{}
}

// Kind is derived from the models package and is
// defined in type.go, shared among implementations
func (credential *Credential) Kind() data.Kind {
	return CredentialKind
}

// just returns itself for now
func (credential *Credential) Concerned() []data.ID {
	foo := make([]data.ID, 1)
	foo[0] = credential.ID()
	return foo
}

func (credential *Credential) SetID(id data.ID) {
	credential.Id = id.String()
}

func (credential *Credential) ID() data.ID {
	return data.ID(credential.Id)
}

func (credential *Credential) SetUser(user *User) error {
	credential.UserID = user.ID().String()
	return nil
}

func (credential *Credential) User(db data.DB) (*User, error) {
	if credential.UserID == "" {
		return nil, ErrEmptyLink
	}

	user := NewUser()
	pid, _ := mongo.ParseObjectID(credential.UserID)
	user.SetID(data.ID(pid.Hex()))
	return user, db.PopulateByID(user)

}

func (credential *Credential) UserOrCreate(db data.DB) (*User, error) {
	user, err := credential.User(db)

	if err == ErrEmptyLink {
		user := NewUser()
		user.SetID(db.NewID())
		if err := credential.SetUser(user); err != nil {
			return nil, err
		}

		if err := db.Save(user); err != nil {
			return nil, err
		}

		if err := db.Save(credential); err != nil {
			return nil, err
		}

		return user, nil
	} else {
		return user, err
	}
}

// BSON {{{
func (credential *Credential) GetBSON() (interface{}, error) {

	return struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id string `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		Private string `json:"private" bson:"private"`

		Public string `json:"public" bson:"public"`

		Spec string `json:"spec" bson:"spec"`

		UserID string `json:"user_id" bson:"user_id"`
	}{

		CreatedAt: credential.CreatedAt,

		Name: credential.Name,

		Private: credential.Private,

		Public: credential.Public,

		Spec: credential.Spec,

		UserID: credential.UserID,
	}, nil

}

func (credential *Credential) SetBSON(raw bson.Raw) error {

	tmp := struct {
		CreatedAt time.Time `json:"created_at" bson:"created_at"`

		Id bson.ObjectId `json:"id" bson:"_id,omitempty"`

		Name string `json:"name" bson:"name"`

		Private string `json:"private" bson:"private"`

		Public string `json:"public" bson:"public"`

		Spec string `json:"spec" bson:"spec"`

		UserID string `json:"user_id" bson:"user_id"`
	}{}

	err := raw.Unmarshal(&tmp)
	if err != nil {
		return err
	}

	credential.CreatedAt = tmp.CreatedAt

	credential.Id = tmp.Id.Hex()

	credential.Name = tmp.Name

	credential.Private = tmp.Private

	credential.Public = tmp.Public

	credential.Spec = tmp.Spec

	credential.UserID = tmp.UserID

	return nil

}

// BSON }}}
